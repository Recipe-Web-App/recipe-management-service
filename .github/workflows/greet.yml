---
name: Greet Contributors

on: # yamllint disable-line rule:truthy
  issues:
    types: [opened]
  pull_request_target:
    types: [opened]

permissions:
  issues: write
  pull-requests: write

jobs:
  greet:
    name: Greet First-Time Contributors
    runs-on: ubuntu-latest

    steps:
    - name: Greet first-time issue creator
      if: github.event_name == 'issues'
      uses: actions/github-script@v8
      with:
        script: |
          const creator = context.payload.issue.user.login;

          // Check if this is the user's first issue
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            creator: creator,
            state: 'all'
          });

          if (issues.data.length === 1) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `ðŸ‘‹ Hello @${creator}!\n\n` +
                    `Thank you for opening your first issue in this repository! ` +
                    `We appreciate you taking the time to contribute.\n\n` +
                    `A maintainer will review your issue and respond as soon as possible.\n\n` +
                    `In the meantime, please make sure you've:\n` +
                    `- [ ] Provided all the requested information\n` +
                    `- [ ] Searched for similar existing issues\n` +
                    `- [ ] Read our [Contributing Guidelines](.github/CONTRIBUTING.md)\n\n` +
                    `Welcome to the community! ðŸŽ‰`
            });
          }

    - name: Greet first-time PR creator
      if: github.event_name == 'pull_request_target'
      uses: actions/github-script@v8
      with:
        script: |
          const creator = context.payload.pull_request.user.login;

          // Check if this is the user's first PR
          const prs = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'all',
            creator: creator
          });

          if (prs.data.length === 1) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `ðŸŽ‰ Congratulations @${creator} on opening your first pull request!\n\n` +
                    `Thank you for taking the time to contribute to this project! ` +
                    `We're excited to review your changes.\n\n` +
                    `**What happens next?**\n` +
                    `- Automated checks will run on your PR\n` +
                    `- A maintainer will review your code and provide feedback\n` +
                    `- Please address any comments or suggestions\n` +
                    `- Once approved, a maintainer will merge your PR\n\n` +
                    `**Helpful resources:**\n` +
                    `- [Contributing Guidelines](.github/CONTRIBUTING.md)\n` +
                    `- [Code of Conduct](.github/CODE_OF_CONDUCT.md)\n` +
                    `- [Pull Request Template](.github/pull_request_template.md)\n\n` +
                    `Thank you for being part of our community! ðŸ™Œ`
            });
          }
