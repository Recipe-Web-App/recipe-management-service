---
openapi: 3.1.0
info:
  title: Recipe Management Service API
  description: |
    Comprehensive recipe management service for the Recipe Web Application ecosystem.

    Provides complete functionality for managing recipes, ingredients, steps, tags,
    reviews, and media content. Built with Spring Boot 3.5.3 and Java 21.

    **Features:**
    - Complete recipe CRUD operations
    - Advanced search and filtering
    - Ingredient management with scaling and shopping lists
    - Step-by-step cooking instructions
    - User reviews and ratings
    - Tag-based categorization
    - Media upload and management
    - Revision history tracking
    - JWT authentication integration
  version: 1.0.0
  contact:
    name: Recipe Web App Team
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api/v1/recipe-management
    description: Local development server
  - url: http://recipe-management.local/api/v1/recipe-management
    description: Kubernetes deployment

security:
  - BearerAuth: []

tags:
  - name: recipes
    description: Recipe CRUD operations and management
  - name: ingredients
    description: Ingredient management and scaling
  - name: steps
    description: Cooking step management
  - name: tags
    description: Recipe categorization and tagging
  - name: reviews
    description: Recipe reviews and ratings
  - name: media
    description: Media file management
  - name: revisions
    description: Change history tracking
  - name: search
    description: Recipe search and filtering
  - name: health
    description: Health checks and monitoring endpoints
  - name: monitoring
    description: Application metrics and observability

paths:
  /recipes:
    get:
      tags: [recipes]
      summary: Get all recipes
      description: |
        Retrieves all recipes with pagination support. Returns basic recipe information
        including title, description, ratings, and metadata.
      operationId: getAllRecipes
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: List of recipes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchRecipesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [recipes]
      summary: Create new recipe
      description: |
        Creates a new recipe with ingredients, steps, and tags. The recipe is
        associated with the authenticated user.
      operationId: createRecipe
      requestBody:
        description: Recipe creation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecipeRequest'
      responses:
        '201':
          description: Recipe created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}:
    get:
      tags: [recipes]
      summary: Get recipe by ID
      description: |
        Retrieves a complete recipe with all associated data including ingredients,
        steps, tags, and summary statistics.
      operationId: getRecipeById
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      responses:
        '200':
          description: Recipe retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [recipes]
      summary: Update recipe
      description: |
        Updates an existing recipe. User must own the recipe or have appropriate
        permissions to modify it.
      operationId: updateRecipe
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      requestBody:
        description: Recipe update data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRecipeRequest'
      responses:
        '200':
          description: Recipe updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [recipes]
      summary: Delete recipe
      description: |
        Permanently deletes a recipe and all associated data including ingredients,
        steps, reviews, and media. User must own the recipe to delete it.
      operationId: deleteRecipe
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      responses:
        '204':
          description: Recipe deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/description:
    get:
      tags: [recipes]
      summary: Get recipe description
      description: |
        Retrieves the description of a specific recipe.
      operationId: getRecipeDescription
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      responses:
        '200':
          description: Recipe description retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Classic homemade chocolate chip cookies"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/history:
    get:
      tags: [recipes]
      summary: Get recipe history
      description: |
        Retrieves the history/timeline of changes for a specific recipe.
      operationId: getRecipeHistory
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      responses:
        '200':
          description: Recipe history retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                example: "Recipe history placeholder"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/search:
    post:
      tags: [search]
      summary: Search recipes
      description: |
        Advanced recipe search with multiple criteria including ingredients, tags,
        difficulty, timing, and ratings. Supports flexible matching options.
      operationId: searchRecipes
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      requestBody:
        description: Search criteria
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRecipesRequest'
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchRecipesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/ingredients:
    get:
      tags: [ingredients]
      summary: Get recipe ingredients
      description: |
        Retrieves all ingredients for a recipe including quantities, units,
        notes, and associated comments.
      operationId: getRecipeIngredients
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      responses:
        '200':
          description: Ingredients retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeIngredientsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/ingredients/scale:
    get:
      tags: [ingredients]
      summary: Scale recipe ingredients
      description: |
        Scales ingredient quantities based on a multiplier. Useful for adjusting
        recipes for different serving sizes.
      operationId: scaleIngredients
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - name: quantity
          in: query
          description: Scaling multiplier
          required: true
          schema:
            type: number
            format: float
            minimum: 0
            example: 1.5
      responses:
        '200':
          description: Ingredients scaled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeIngredientsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/ingredients/shopping-list:
    get:
      tags: [ingredients]
      summary: Generate shopping list
      description: |
        Creates a shopping list from recipe ingredients, organized by category
        for convenient grocery shopping.
      operationId: generateShoppingList
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      responses:
        '200':
          description: Shopping list generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/ingredients/{ingredientId}/comment:
    post:
      tags: [ingredients]
      summary: Add ingredient comment
      description: |
        Adds a user comment to a recipe ingredient. Comments can include tips,
        substitutions, or preparation notes.
      operationId: addIngredientComment
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/IngredientIdParam'
      requestBody:
        description: Comment data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddIngredientCommentRequest'
      responses:
        '200':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientCommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [ingredients]
      summary: Edit ingredient comment
      description: |
        Updates an existing ingredient comment. User must own the comment to edit it.
      operationId: editIngredientComment
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/IngredientIdParam'
      requestBody:
        description: Updated comment data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditIngredientCommentRequest'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientCommentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [ingredients]
      summary: Delete ingredient comment
      description: |
        Removes an ingredient comment. User must own the comment to delete it.
      operationId: deleteIngredientComment
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/IngredientIdParam'
      requestBody:
        description: Comment deletion data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteIngredientCommentRequest'
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientCommentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/steps:
    get:
      tags: [steps]
      summary: Get recipe steps
      description: |
        Retrieves all cooking steps for a recipe in order, including instructions,
        timing, and associated comments.
      operationId: getRecipeSteps
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      responses:
        '200':
          description: Steps retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/steps/{stepId}/comment:
    get:
      tags: [steps]
      summary: Get step comments
      description: |
        Retrieves all comments for a specific recipe step.
      operationId: getStepComments
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/StepIdParam'
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepCommentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [steps]
      summary: Add step comment
      description: |
        Adds a user comment to a recipe step. Comments can include tips,
        variations, or troubleshooting advice.
      operationId: addStepComment
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/StepIdParam'
      requestBody:
        description: Comment data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddStepCommentRequest'
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepCommentDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [steps]
      summary: Edit step comment
      description: |
        Updates an existing step comment. User must own the comment to edit it.
      operationId: editStepComment
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/StepIdParam'
      requestBody:
        description: Updated comment data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditStepCommentRequest'
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepCommentDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [steps]
      summary: Delete step comment
      description: |
        Removes a step comment. User must own the comment to delete it.
      operationId: deleteStepComment
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/StepIdParam'
      requestBody:
        description: Comment deletion data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteStepCommentRequest'
      responses:
        '204':
          description: Comment deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/tags:
    get:
      tags: [tags]
      summary: Get recipe tags
      description: |
        Retrieves all tags associated with a recipe for categorization and discovery.
      operationId: getRecipeTags
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      responses:
        '200':
          description: Tags retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [tags]
      summary: Add tag to recipe
      description: |
        Associates a tag with a recipe for categorization. Creates the tag if it
        doesn't exist.
      operationId: addTagToRecipe
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      requestBody:
        description: Tag data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTagRequest'
      responses:
        '201':
          description: Tag added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [tags]
      summary: Remove tag from recipe
      description: |
        Removes a tag association from a recipe. The tag itself is not deleted.
      operationId: removeTagFromRecipe
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      requestBody:
        description: Tag removal data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveTagRequest'
      responses:
        '200':
          description: Tag removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/review:
    get:
      tags: [reviews]
      summary: Get recipe reviews
      description: |
        Retrieves all reviews for a recipe including ratings, comments, and
        summary statistics.
      operationId: getRecipeReviews
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      responses:
        '200':
          description: Reviews retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [reviews]
      summary: Add recipe review
      description: |
        Adds a user review and rating to a recipe. Users can only review
        recipes they haven't reviewed before.
      operationId: addRecipeReview
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      requestBody:
        description: Review data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddReviewRequest'
      responses:
        '200':
          description: Review added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/review/{reviewId}:
    put:
      tags: [reviews]
      summary: Edit recipe review
      description: |
        Updates an existing review. User must own the review to edit it.
      operationId: editRecipeReview
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/ReviewIdParam'
      requestBody:
        description: Updated review data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditReviewRequest'
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [reviews]
      summary: Delete recipe review
      description: |
        Removes a recipe review. User must own the review to delete it.
      operationId: deleteRecipeReview
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/ReviewIdParam'
      responses:
        '204':
          description: Review deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/revisions:
    get:
      tags: [revisions]
      summary: Get recipe revisions
      description: |
        Retrieves the complete revision history for a recipe showing all changes
        over time.
      operationId: getRecipeRevisions
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      responses:
        '200':
          description: Revisions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeRevisionsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/steps/{stepId}/revisions:
    get:
      tags: [revisions]
      summary: Get step revisions
      description: |
        Retrieves the revision history for a specific recipe step.
      operationId: getStepRevisions
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/StepIdParam'
      responses:
        '200':
          description: Step revisions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepRevisionsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/ingredients/{ingredientId}/revisions:
    get:
      tags: [revisions]
      summary: Get ingredient revisions
      description: |
        Retrieves the revision history for a specific recipe ingredient.
      operationId: getIngredientRevisions
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/IngredientIdParam'
      responses:
        '200':
          description: Ingredient revisions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientRevisionsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/media:
    get:
      tags: [media]
      summary: Get recipe media
      description: |
        Retrieves all media files associated with a recipe including images,
        videos, and other content.
      operationId: getRecipeMedia
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: Media retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMediaDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [media]
      summary: Upload recipe media
      description: |
        Uploads and associates media files with a recipe. Supports images,
        videos, and audio files.
      operationId: uploadRecipeMedia
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
      requestBody:
        description: Media upload data
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MediaUploadRequest'
      responses:
        '200':
          description: Media uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMediaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/media/{mediaId}:
    delete:
      tags: [media]
      summary: Delete recipe media
      description: |
        Removes media associated with a recipe. User must own the recipe to
        delete its media.
      operationId: deleteRecipeMedia
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/MediaIdParam'
      responses:
        '200':
          description: Media deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMediaResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/ingredients/{ingredientId}/media:
    get:
      tags: [media]
      summary: Get ingredient media
      description: |
        Retrieves media files associated with a recipe ingredient.
      operationId: getIngredientMedia
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/IngredientIdParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: Media retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMediaDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [media]
      summary: Upload ingredient media
      description: |
        Uploads and associates media files with a recipe ingredient.
      operationId: uploadIngredientMedia
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/IngredientIdParam'
      requestBody:
        description: Media upload data
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MediaUploadRequest'
      responses:
        '200':
          description: Media uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMediaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/ingredients/{ingredientId}/media/{mediaId}:
    delete:
      tags: [media]
      summary: Delete ingredient media
      description: |
        Removes media associated with a recipe ingredient.
      operationId: deleteIngredientMedia
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/IngredientIdParam'
        - $ref: '#/components/parameters/MediaIdParam'
      responses:
        '200':
          description: Media deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMediaResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/steps/{stepId}/media:
    get:
      tags: [media]
      summary: Get step media
      description: |
        Retrieves media files associated with a recipe step.
      operationId: getStepMedia
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/StepIdParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: Media retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMediaDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [media]
      summary: Upload step media
      description: |
        Uploads and associates media files with a recipe step.
      operationId: uploadStepMedia
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/StepIdParam'
      requestBody:
        description: Media upload data
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MediaUploadRequest'
      responses:
        '200':
          description: Media uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMediaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /recipes/{recipeId}/steps/{stepId}/media/{mediaId}:
    delete:
      tags: [media]
      summary: Delete step media
      description: |
        Removes media associated with a recipe step.
      operationId: deleteStepMedia
      parameters:
        - $ref: '#/components/parameters/RecipeIdParam'
        - $ref: '#/components/parameters/StepIdParam'
        - $ref: '#/components/parameters/MediaIdParam'
      responses:
        '200':
          description: Media deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMediaResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /actuator/health:
    get:
      tags: [health]
      summary: Get application health status
      description: |
        Comprehensive health check endpoint that monitors all application components
        including database connectivity, disk space, memory usage, and external services.

        Includes custom health indicators for:
        - Database connection with retry logic
        - Disk space monitoring with thresholds
        - JVM memory usage monitoring
        - Recipe scraper service availability
        - Circuit breaker states
      operationId: getHealth
      responses:
        '200':
          description: Health status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service unavailable - health check failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /actuator/health/readiness:
    get:
      tags: [health]
      summary: Get application readiness status
      description: |
        Readiness probe for Kubernetes deployments. Indicates whether the application
        is ready to receive traffic.
      operationId: getReadiness
      responses:
        '200':
          description: Application is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Application is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /actuator/health/liveness:
    get:
      tags: [health]
      summary: Get application liveness status
      description: |
        Liveness probe for Kubernetes deployments. Indicates whether the application
        is alive and should not be restarted.
      operationId: getLiveness
      responses:
        '200':
          description: Application is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Application is not responding
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /actuator/info:
    get:
      tags: [monitoring]
      summary: Get application information
      description: |
        Provides application metadata including version, build info, and configuration.
      operationId: getInfo
      responses:
        '200':
          description: Application info retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'

  /actuator/metrics:
    get:
      tags: [monitoring]
      summary: Get available metrics
      description: |
        Lists all available application metrics that can be queried.
      operationId: getMetrics
      responses:
        '200':
          description: Metrics list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'

  /actuator/metrics/{metricName}:
    get:
      tags: [monitoring]
      summary: Get specific metric value
      description: |
        Retrieves the current value and statistics for a specific metric.
      operationId: getMetric
      parameters:
        - name: metricName
          in: path
          description: Name of the metric to retrieve
          required: true
          schema:
            type: string
            example: "jvm.memory.used"
      responses:
        '200':
          description: Metric value retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricResponse'
        '404':
          description: Metric not found

  /actuator/prometheus:
    get:
      tags: [monitoring]
      summary: Get Prometheus metrics
      description: |
        Provides all metrics in Prometheus format for scraping by monitoring systems.
      operationId: getPrometheusMetrics
      responses:
        '200':
          description: Prometheus metrics retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Metrics in Prometheus exposition format
                example: |
                  # HELP jvm_memory_used_bytes The amount of used memory
                  # TYPE jvm_memory_used_bytes gauge
                  jvm_memory_used_bytes{area="heap",id="PS Eden Space",} 1.234567E8

  /actuator/env:
    get:
      tags: [monitoring]
      summary: Get environment properties
      description: |
        Provides access to environment properties and configuration values.
        Sensitive values are masked for security.

        **Security Note:** This endpoint may expose configuration details.
        Access should be restricted in production environments.
      operationId: getEnvironment
      responses:
        '200':
          description: Environment properties retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentResponse'

  /actuator/env/{propertyName}:
    get:
      tags: [monitoring]
      summary: Get specific environment property
      description: |
        Retrieves the value of a specific environment property or configuration setting.
      operationId: getEnvironmentProperty
      parameters:
        - name: propertyName
          in: path
          description: Name of the property to retrieve
          required: true
          schema:
            type: string
            example: "spring.application.name"
      responses:
        '200':
          description: Property retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyResponse'
        '404':
          description: Property not found

  /actuator/configprops:
    get:
      tags: [monitoring]
      summary: Get configuration properties
      description: |
        Provides access to all configuration properties bound to @ConfigurationProperties beans.
        Shows the actual configuration values used by the application.

        **Security Note:** Sensitive properties are masked for security.
        Access should be restricted in production environments.
      operationId: getConfigurationProperties
      responses:
        '200':
          description: Configuration properties retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigPropsResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token authentication. Obtain token from user-management-service
        and include in Authorization header as 'Bearer <token>'.

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number (0-based)
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0

    SizeParam:
      name: size
      in: query
      description: Page size
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    SortParam:
      name: sort
      in: query
      description: Sort criteria (property,direction)
      required: false
      schema:
        type: array
        items:
          type: string
        example: ["createdAt,desc", "title,asc"]

    RecipeIdParam:
      name: recipeId
      in: path
      description: Recipe identifier
      required: true
      schema:
        type: integer
        format: int64
        example: 123

    IngredientIdParam:
      name: ingredientId
      in: path
      description: Ingredient identifier
      required: true
      schema:
        type: integer
        format: int64
        example: 456

    StepIdParam:
      name: stepId
      in: path
      description: Step identifier
      required: true
      schema:
        type: integer
        format: int64
        example: 789

    ReviewIdParam:
      name: reviewId
      in: path
      description: Review identifier
      required: true
      schema:
        type: integer
        format: int64
        example: 101

    MediaIdParam:
      name: mediaId
      in: path
      description: Media identifier
      required: true
      schema:
        type: integer
        format: int64
        example: 201

  schemas:
    RecipeDto:
      type: object
      required:
        - recipeId
        - title
        - servings
        - createdAt
        - userId
      properties:
        recipeId:
          type: integer
          format: int64
          description: Unique recipe identifier
          example: 123
        userId:
          type: string
          format: uuid
          description: UUID of the user who created the recipe
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Recipe title
          example: "Chocolate Chip Cookies"
        description:
          type: string
          maxLength: 2000
          description: Recipe description
          example: "Classic homemade chocolate chip cookies"
        originUrl:
          type: string
          description: The origin URL of the recipe
          example: "https://example.com/recipe/123"
        servings:
          type: number
          format: decimal
          minimum: 0
          description: Number of servings as decimal
          example: 4.5
        preparationTime:
          type: integer
          minimum: 0
          description: Preparation time in minutes
          example: 15
        cookingTime:
          type: integer
          minimum: 0
          description: Cooking time in minutes
          example: 12
        difficulty:
          $ref: '#/components/schemas/DifficultyLevel'
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-08-28T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-08-28T10:30:00Z"
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/RecipeIngredientDto'
        steps:
          type: array
          items:
            $ref: '#/components/schemas/RecipeStepDto'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/RecipeTagDto'
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/RecipeRevisionDto'
        favorites:
          type: array
          items:
            $ref: '#/components/schemas/RecipeFavoriteDto'

    RecipeIngredientDto:
      type: object
      required:
        - ingredientId
        - ingredientName
        - quantity
        - unit
      properties:
        recipeId:
          type: integer
          format: int64
          description: Recipe identifier
          example: 123
        ingredientId:
          type: integer
          format: int64
          description: Ingredient identifier
          example: 789
        ingredientName:
          type: string
          minLength: 1
          maxLength: 100
          description: Ingredient name
          example: "All-purpose flour"
        quantity:
          type: number
          format: decimal
          minimum: 0
          exclusiveMinimum: true
          description: Ingredient quantity as decimal
          example: 2.25
        unit:
          $ref: '#/components/schemas/IngredientUnit'
        isOptional:
          type: boolean
          description: Whether the ingredient is optional
          example: false
        comments:
          type: array
          description: Comments associated with this ingredient
          items:
            $ref: '#/components/schemas/IngredientCommentDto'

    RecipeStepDto:
      type: object
      required:
        - stepId
        - stepNumber
        - instruction
        - order
      properties:
        stepId:
          type: integer
          format: int64
          description: Step identifier
          example: 101
        stepNumber:
          type: integer
          minimum: 1
          description: Step sequence number
          example: 1
        instruction:
          type: string
          minLength: 1
          maxLength: 1000
          description: Step instructions
          example: "Preheat oven to 375°F (190°C)"
        duration:
          type: integer
          minimum: 0
          description: Step duration in minutes
          example: 5
        order:
          type: integer
          minimum: 1
          description: Display order
          example: 1

    RecipeTagDto:
      type: object
      required:
        - tagId
        - name
        - category
      properties:
        tagId:
          type: integer
          format: int64
          description: Tag identifier
          example: 201
        name:
          type: string
          minLength: 1
          maxLength: 50
          description: Tag name
          example: "dessert"
        category:
          type: string
          description: Tag category
          example: "CATEGORY"
        description:
          type: string
          maxLength: 200
          description: Tag description
          example: "Sweet treats and desserts"
        usageCount:
          type: integer
          minimum: 0
          description: Number of recipes using this tag
          example: 150

    MediaDto:
      type: object
      required:
        - mediaId
        - userId
        - mediaType
        - processingStatus
      properties:
        mediaId:
          type: integer
          format: int64
          description: Media identifier
          example: 701
        userId:
          type: string
          format: uuid
          description: UUID of the user who owns the media
          example: "123e4567-e89b-12d3-a456-426614174000"
        mediaType:
          $ref: '#/components/schemas/MediaType'
        originalFilename:
          type: string
          description: Original filename
          example: "cookies.jpg"
        fileSize:
          type: integer
          format: int64
          minimum: 0
          description: File size in bytes
          example: 1048576
        contentHash:
          type: string
          description: Content hash for integrity checking
          example: "abc123def456"
        processingStatus:
          $ref: '#/components/schemas/ProcessingStatus'
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-08-28T11:05:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-08-28T11:05:00Z"

    PageMediaDto:
      type: object
      description: Paginated media response matching Spring Page structure
      properties:
        content:
          type: array
          description: Media items for current page
          items:
            $ref: '#/components/schemas/MediaDto'
        pageable:
          type: object
          description: Pagination information
          properties:
            pageNumber:
              type: integer
              description: Current page number (0-based)
            pageSize:
              type: integer
              description: Size of the page
            sort:
              type: object
              description: Sort information
              properties:
                sorted:
                  type: boolean
                unsorted:
                  type: boolean
                empty:
                  type: boolean
            offset:
              type: integer
              format: int64
              description: Offset of the first item
            paged:
              type: boolean
              description: Whether pagination is enabled
            unpaged:
              type: boolean
              description: Whether pagination is disabled
        totalElements:
          type: integer
          format: int64
          description: Total number of elements
        totalPages:
          type: integer
          description: Total number of pages
        last:
          type: boolean
          description: Whether this is the last page
        first:
          type: boolean
          description: Whether this is the first page
        numberOfElements:
          type: integer
          description: Number of elements in current page
        size:
          type: integer
          description: Size of the page
        number:
          type: integer
          description: Current page number (0-based)
        sort:
          type: object
          description: Sort information
          properties:
            sorted:
              type: boolean
            unsorted:
              type: boolean
            empty:
              type: boolean
        empty:
          type: boolean
          description: Whether the page is empty

    HealthResponse:
      type: object
      description: Spring Boot Actuator health response
      properties:
        status:
          type: string
          enum: [UP, DOWN, DEGRADED, WARNING, OUT_OF_SERVICE, UNKNOWN]
          description: Overall health status
          example: UP
        components:
          type: object
          description: Individual component health details
          additionalProperties:
            type: object
            properties:
              status:
                type: string
                enum: [UP, DOWN, DEGRADED, WARNING, OUT_OF_SERVICE, UNKNOWN]
              details:
                type: object
                additionalProperties: true
                description: Component-specific health details
          example:
            databaseHealthIndicator:
              status: UP
              details:
                database: PostgreSQL
                status: connected
                connectionRetryEnabled: true
                lastSuccessfulConnection: "2024-08-28T10:30:00"
            diskSpaceHealthIndicator:
              status: UP
              details:
                disk.usage.percentage: "45.67%"
                disk.free.space: "120.45 GB"
                disk.total.space: "220.00 GB"
            memoryHealthIndicator:
              status: UP
              details:
                memory.heap.usage.percentage: "67.23%"
                memory.heap.used: "512.34 MB"
                memory.heap.max: "762.00 MB"
            recipeScraperHealth:
              status: UP
              details:
                status: available
                responseTime: "245ms"
                baseUrl: "http://recipe.local"
        groups:
          type: object
          description: Health indicator groups
          properties:
            liveness:
              type: object
              properties:
                status:
                  type: string
                components:
                  type: object
                  additionalProperties: true
            readiness:
              type: object
              properties:
                status:
                  type: string
                components:
                  type: object
                  additionalProperties: true

    InfoResponse:
      type: object
      description: Application information response
      properties:
        app:
          type: object
          properties:
            name:
              type: string
              example: "recipe-management-service"
            version:
              type: string
              example: "1.0.0"
            description:
              type: string
              example: "Recipe Management Service API"
        build:
          type: object
          properties:
            version:
              type: string
            time:
              type: string
              format: date-time
            artifact:
              type: string
            name:
              type: string
            group:
              type: string
        java:
          type: object
          properties:
            version:
              type: string
              example: "21.0.2"
            vendor:
              type: string
              example: "Eclipse Adoptium"
        os:
          type: object
          properties:
            name:
              type: string
            version:
              type: string
            arch:
              type: string

    MetricsResponse:
      type: object
      description: Available metrics list
      properties:
        names:
          type: array
          items:
            type: string
          example:
            - "jvm.memory.used"
            - "jvm.memory.max"
            - "http.server.requests"
            - "system.cpu.usage"
            - "jdbc.connections.active"
            - "external.service.calls"
            - "external.service.failures"
            - "external.service.response.time"
            - "shopping.list.generations"
            - "shopping.list.with.pricing"

    MetricResponse:
      type: object
      description: Specific metric details
      properties:
        name:
          type: string
          description: Metric name
          example: "jvm.memory.used"
        description:
          type: string
          description: Metric description
          example: "The amount of used memory"
        baseUnit:
          type: string
          description: Base unit of measurement
          example: "bytes"
        measurements:
          type: array
          items:
            type: object
            properties:
              statistic:
                type: string
                example: "VALUE"
              value:
                type: number
                example: 1234567890
        availableTags:
          type: array
          items:
            type: object
            properties:
              tag:
                type: string
                example: "area"
              values:
                type: array
                items:
                  type: string
                example: ["heap", "nonheap"]

    EnvironmentResponse:
      type: object
      description: Environment properties response
      properties:
        activeProfiles:
          type: array
          items:
            type: string
          example: ["default"]
        propertySources:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "applicationConfig: [classpath:/application.yml]"
              properties:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    value:
                      type: string
                    origin:
                      type: string
                    sensitive:
                      type: boolean
                example:
                  spring.application.name:
                    value: "recipe-management-service"
                    origin: "class path resource [application.yml] - 19:7"
                    sensitive: false
                  server.port:
                    value: "8080"
                    origin: "class path resource [application.yml] - 4:8"
                    sensitive: false
                  POSTGRES_PASSWORD:
                    value: "******"
                    origin: "System Environment"
                    sensitive: true

    PropertyResponse:
      type: object
      description: Single property response
      properties:
        property:
          type: object
          properties:
            source:
              type: string
              example: "applicationConfig: [classpath:/application.yml]"
            value:
              type: string
              example: "recipe-management-service"
        activeProfiles:
          type: array
          items:
            type: string
        propertySources:
          type: array
          items:
            type: string

    ConfigPropsResponse:
      type: object
      description: Configuration properties response
      properties:
        contexts:
          type: object
          additionalProperties:
            type: object
            properties:
              beans:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    prefix:
                      type: string
                      example: "server"
                    properties:
                      type: object
                      additionalProperties: true
                      example:
                        port: 8080
                        error:
                          include-message: "always"
                          include-binding-errors: "always"
                        servlet:
                          context-path: "/api/v1/recipe-management"
              parentId:
                type: string
                nullable: true
          example:
            application:
              beans:
                server:
                  prefix: "server"
                  properties:
                    port: 8080
                    servlet:
                      context-path: "/api/v1/recipe-management"
                management:
                  prefix: "management"
                  properties:
                    endpoints:
                      web:
                        exposure:
                          include: ["health", "info", "prometheus", "metrics"]
                        base-path: "/actuator"
                spring.application:
                  prefix: "spring.application"
                  properties:
                    name: "recipe-management-service"
              parentId: null

    IngredientCommentDto:
      type: object
      required:
        - commentId
        - recipeId
        - userId
        - commentText
        - createdAt
      properties:
        commentId:
          type: integer
          format: int64
          description: Comment identifier
          example: 301
        recipeId:
          type: integer
          format: int64
          description: Recipe identifier
          example: 123
        userId:
          type: string
          format: uuid
          description: UUID of user who wrote the comment
          example: "123e4567-e89b-12d3-a456-426614174000"
        commentText:
          type: string
          minLength: 1
          maxLength: 1000
          description: Comment text content
          example: "Make sure to sift for best results"
        isPublic:
          type: boolean
          description: Whether comment is public or private
          example: true
        createdAt:
          type: string
          format: date-time
          description: Comment creation timestamp
          example: "2024-08-28T10:35:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-08-28T10:35:00Z"

    RecipeFavoriteDto:
      type: object
      required:
        - recipeId
        - userId
        - favoritedAt
      properties:
        recipeId:
          type: integer
          format: int64
          description: Recipe identifier
          example: 123
        userId:
          type: string
          format: uuid
          description: UUID of user who favorited the recipe
          example: "123e4567-e89b-12d3-a456-426614174000"
        favoritedAt:
          type: string
          format: date-time
          description: Timestamp when recipe was favorited
          example: "2024-08-28T10:35:00Z"

    RecipeRevisionDto:
      type: object
      required:
        - revisionId
        - recipeId
        - userId
        - revisionCategory
        - revisionType
        - createdAt
      properties:
        revisionId:
          type: integer
          format: int64
          description: Revision identifier
          example: 501
        recipeId:
          type: integer
          format: int64
          description: Recipe identifier
          example: 123
        userId:
          type: string
          format: uuid
          description: UUID of user who made the revision
          example: "123e4567-e89b-12d3-a456-426614174000"
        revisionCategory:
          $ref: '#/components/schemas/RevisionCategory'
        revisionType:
          $ref: '#/components/schemas/RevisionType'
        previousData:
          type: string
          description: Previous data before revision
          example: "Original recipe data"
        newData:
          type: string
          description: New data after revision
          example: "Updated recipe data"
        changeComment:
          type: string
          description: Comment describing the change
          example: "Updated serving size"
        createdAt:
          type: string
          format: date-time
          description: Revision creation timestamp
          example: "2024-08-28T10:35:00Z"

    ReviewDto:
      type: object
      required:
        - reviewId
        - userId
        - rating
        - createdAt
      properties:
        reviewId:
          type: integer
          format: int64
          description: Review identifier
          example: 501
        userId:
          type: integer
          format: int64
          description: User who wrote the review
          example: 456
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Recipe rating (1-5 stars)
          example: 5
        comment:
          type: string
          maxLength: 2000
          description: Review comment
          example: "Absolutely delicious! My family loved these cookies."
        createdAt:
          type: string
          format: date-time
          description: Review creation timestamp
          example: "2024-08-28T10:55:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-08-28T10:55:00Z"

    StepCommentDto:
      type: object
      required:
        - commentId
        - stepId
        - userId
        - comment
        - createdAt
      properties:
        commentId:
          type: integer
          format: int64
          description: Comment identifier
          example: 401
        stepId:
          type: integer
          format: int64
          description: Step identifier
          example: 101
        userId:
          type: integer
          format: int64
          description: User who wrote the comment
          example: 456
        comment:
          type: string
          minLength: 1
          maxLength: 1000
          description: Comment text
          example: "Don't forget to preheat early"
        createdAt:
          type: string
          format: date-time
          description: Comment creation timestamp
          example: "2024-08-28T10:40:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-08-28T10:40:00Z"

    CreateRecipeRequest:
      type: object
      required:
        - title
        - servings
        - ingredients
        - steps
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Recipe title
          example: "Chocolate Chip Cookies"
        description:
          type: string
          maxLength: 2000
          description: Recipe description
          example: "Classic homemade chocolate chip cookies"
        servings:
          type: integer
          minimum: 1
          maximum: 1000
          description: Number of servings
          example: 24
        prepTime:
          type: integer
          minimum: 0
          description: Preparation time in minutes
          example: 15
        cookTime:
          type: integer
          minimum: 0
          description: Cooking time in minutes
          example: 12
        difficulty:
          $ref: '#/components/schemas/DifficultyLevel'
        ingredients:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/CreateRecipeIngredientRequest'
        steps:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/CreateRecipeStepRequest'
        tags:
          type: array
          items:
            type: string
            example: "dessert"

    CreateRecipeIngredientRequest:
      type: object
      required:
        - name
        - quantity
        - unit
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Ingredient name
          example: "All-purpose flour"
        quantity:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
          description: Ingredient quantity
          example: 2.25
        unit:
          $ref: '#/components/schemas/IngredientUnit'
        notes:
          type: string
          maxLength: 500
          description: Special notes or instructions
          example: "Sifted"

    CreateRecipeStepRequest:
      type: object
      required:
        - stepNumber
        - instruction
      properties:
        stepNumber:
          type: integer
          minimum: 1
          description: Step sequence number
          example: 1
        instruction:
          type: string
          minLength: 1
          maxLength: 1000
          description: Step instructions
          example: "Preheat oven to 375°F (190°C)"
        duration:
          type: integer
          minimum: 0
          description: Step duration in minutes
          example: 5

    UpdateRecipeRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Recipe title
        description:
          type: string
          maxLength: 2000
          description: Recipe description
        servings:
          type: integer
          minimum: 1
          maximum: 1000
          description: Number of servings
        prepTime:
          type: integer
          minimum: 0
          description: Preparation time in minutes
        cookTime:
          type: integer
          minimum: 0
          description: Cooking time in minutes
        difficulty:
          $ref: '#/components/schemas/DifficultyLevel'

    SearchRecipesRequest:
      type: object
      properties:
        query:
          type: string
          description: Text search query
          example: "chocolate chip"
        ingredients:
          type: array
          items:
            type: string
          description: Required ingredients
          example: ["flour", "chocolate"]
        tags:
          type: array
          items:
            type: string
          description: Recipe tags
          example: ["dessert"]
        difficulty:
          type: array
          items:
            $ref: '#/components/schemas/DifficultyLevel'
          description: Difficulty levels
        maxPrepTime:
          type: integer
          minimum: 0
          description: Maximum preparation time in minutes
          example: 30
        maxCookTime:
          type: integer
          minimum: 0
          description: Maximum cooking time in minutes
          example: 60
        minRating:
          type: number
          format: double
          minimum: 0
          maximum: 5
          description: Minimum average rating
          example: 4.0
        sortBy:
          type: string
          enum: ["RATING_DESC", "RATING_ASC", "DATE_DESC", "DATE_ASC", "TITLE_ASC", "TITLE_DESC"]
          description: Sort order
          example: "RATING_DESC"

    SearchRecipesResponse:
      type: object
      required:
        - content
        - totalElements
        - totalPages
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/RecipeDto'
        totalElements:
          type: integer
          format: int64
          description: Total number of matching recipes
        totalPages:
          type: integer
          description: Total number of pages
        first:
          type: boolean
          description: Whether this is the first page
        last:
          type: boolean
          description: Whether this is the last page
        numberOfElements:
          type: integer
          description: Number of elements in current page

    RecipeIngredientsResponse:
      type: object
      required:
        - recipeId
        - ingredients
      properties:
        recipeId:
          type: integer
          format: int64
          description: Recipe identifier
        ingredients:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/RecipeIngredientDto'
              - type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/IngredientCommentDto'

    ShoppingListResponse:
      type: object
      required:
        - recipeId
        - recipeTitle
        - items
        - generatedAt
      properties:
        recipeId:
          type: integer
          format: int64
          description: Recipe identifier
        recipeTitle:
          type: string
          description: Recipe title
        items:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingListItemDto'
        generatedAt:
          type: string
          format: date-time
          description: Shopping list generation timestamp

    ShoppingListItemDto:
      type: object
      required:
        - name
        - quantity
        - unit
        - category
      properties:
        name:
          type: string
          description: Ingredient name
          example: "All-purpose flour"
        quantity:
          type: number
          format: double
          description: Required quantity
          example: 2.25
        unit:
          $ref: '#/components/schemas/IngredientUnit'
        category:
          type: string
          description: Shopping category
          example: "BAKING"
        notes:
          type: string
          description: Special notes
          example: "Sifted"

    AddIngredientCommentRequest:
      type: object
      required:
        - comment
        - userId
      properties:
        comment:
          type: string
          minLength: 1
          maxLength: 1000
          description: Comment text
        userId:
          type: integer
          format: int64
          description: User ID

    EditIngredientCommentRequest:
      type: object
      required:
        - commentId
        - comment
        - userId
      properties:
        commentId:
          type: integer
          format: int64
          description: Comment identifier
        comment:
          type: string
          minLength: 1
          maxLength: 1000
          description: Updated comment text
        userId:
          type: integer
          format: int64
          description: User ID

    DeleteIngredientCommentRequest:
      type: object
      required:
        - commentId
        - userId
      properties:
        commentId:
          type: integer
          format: int64
          description: Comment identifier
        userId:
          type: integer
          format: int64
          description: User ID

    IngredientCommentResponse:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/IngredientCommentDto'
        status:
          type: string
          description: Operation status
          example: "success"

    StepResponse:
      type: object
      required:
        - recipeId
        - steps
      properties:
        recipeId:
          type: integer
          format: int64
          description: Recipe identifier
        steps:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/RecipeStepDto'
              - type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/StepCommentDto'

    AddStepCommentRequest:
      type: object
      required:
        - comment
        - userId
      properties:
        comment:
          type: string
          minLength: 1
          maxLength: 1000
          description: Comment text
        userId:
          type: integer
          format: int64
          description: User ID

    EditStepCommentRequest:
      type: object
      required:
        - commentId
        - comment
        - userId
      properties:
        commentId:
          type: integer
          format: int64
          description: Comment identifier
        comment:
          type: string
          minLength: 1
          maxLength: 1000
          description: Updated comment text
        userId:
          type: integer
          format: int64
          description: User ID

    DeleteStepCommentRequest:
      type: object
      required:
        - commentId
        - userId
      properties:
        commentId:
          type: integer
          format: int64
          description: Comment identifier
        userId:
          type: integer
          format: int64
          description: User ID

    StepCommentResponse:
      type: object
      properties:
        stepId:
          type: integer
          format: int64
          description: Step identifier
        comments:
          type: array
          items:
            $ref: '#/components/schemas/StepCommentDto'

    TagResponse:
      type: object
      properties:
        recipeId:
          type: integer
          format: int64
          description: Recipe identifier
        tags:
          type: array
          items:
            $ref: '#/components/schemas/RecipeTagDto'
        tag:
          $ref: '#/components/schemas/RecipeTagDto'
        addedAt:
          type: string
          format: date-time
          description: Tag addition timestamp
        removedAt:
          type: string
          format: date-time
          description: Tag removal timestamp
        removedTag:
          $ref: '#/components/schemas/RecipeTagDto'

    AddTagRequest:
      type: object
      required:
        - tagName
      properties:
        tagName:
          type: string
          minLength: 1
          maxLength: 50
          description: Tag name
        category:
          type: string
          description: Tag category

    RemoveTagRequest:
      type: object
      required:
        - tagName
      properties:
        tagName:
          type: string
          description: Tag name to remove

    ReviewResponse:
      type: object
      properties:
        recipeId:
          type: integer
          format: int64
          description: Recipe identifier
        averageRating:
          type: number
          format: double
          description: Average rating
        reviewCount:
          type: integer
          description: Number of reviews
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/ReviewDto'

    AddReviewRequest:
      type: object
      required:
        - rating
        - userId
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Recipe rating (1-5 stars)
        comment:
          type: string
          maxLength: 2000
          description: Review comment
        userId:
          type: integer
          format: int64
          description: User ID

    EditReviewRequest:
      type: object
      required:
        - rating
        - userId
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Updated rating
        comment:
          type: string
          maxLength: 2000
          description: Updated comment
        userId:
          type: integer
          format: int64
          description: User ID

    RecipeRevisionsResponse:
      type: object
      properties:
        recipeId:
          type: integer
          format: int64
          description: Recipe identifier
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/RevisionDto'

    StepRevisionsResponse:
      type: object
      properties:
        stepId:
          type: integer
          format: int64
          description: Step identifier
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/RevisionDto'

    IngredientRevisionsResponse:
      type: object
      properties:
        ingredientId:
          type: integer
          format: int64
          description: Ingredient identifier
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/RevisionDto'

    RevisionDto:
      type: object
      required:
        - revisionId
        - revisionType
        - category
        - createdBy
        - createdAt
      properties:
        revisionId:
          type: integer
          format: int64
          description: Revision identifier
        revisionType:
          $ref: '#/components/schemas/RevisionType'
        category:
          $ref: '#/components/schemas/RevisionCategory'
        changes:
          type: object
          additionalProperties: true
          description: Change details
        createdBy:
          type: integer
          format: int64
          description: User who made the change
        createdAt:
          type: string
          format: date-time
          description: Revision timestamp

    MediaUploadRequest:
      type: object
      required:
        - file
        - originalFilename
        - mediaType
        - fileSize
      properties:
        file:
          type: string
          format: binary
          description: Media file to upload
        originalFilename:
          type: string
          description: Original filename
        mediaType:
          $ref: '#/components/schemas/MediaType'
        fileSize:
          type: integer
          format: int64
          minimum: 1
          description: File size in bytes
        contentHash:
          type: string
          pattern: "^[a-f0-9]{64}$"
          description: Optional SHA-256 content hash

    CreateMediaResponse:
      type: object
      properties:
        mediaId:
          type: integer
          format: int64
          description: Created media identifier
        recipeId:
          type: integer
          format: int64
          description: Associated recipe ID
        ingredientId:
          type: integer
          format: int64
          description: Associated ingredient ID (if applicable)
        stepId:
          type: integer
          format: int64
          description: Associated step ID (if applicable)
        originalFilename:
          type: string
          description: Original filename
        mediaType:
          $ref: '#/components/schemas/MediaType'
        mediaFormat:
          $ref: '#/components/schemas/MediaFormat'
        fileSize:
          type: integer
          format: int64
          description: File size in bytes
        contentHash:
          type: string
          description: Content hash
        processingStatus:
          $ref: '#/components/schemas/ProcessingStatus'
        uploadedAt:
          type: string
          format: date-time
          description: Upload timestamp

    DeleteMediaResponse:
      type: object
      properties:
        mediaId:
          type: integer
          format: int64
          description: Deleted media identifier
        recipeId:
          type: integer
          format: int64
          description: Associated recipe ID
        deleted:
          type: boolean
          description: Whether deletion was successful
        deletedAt:
          type: string
          format: date-time
          description: Deletion timestamp

    DifficultyLevel:
      type: string
      enum: [BEGINNER, EASY, MEDIUM, HARD, EXPERT]
      description: Recipe difficulty level
      example: EASY

    IngredientUnit:
      type: string
      enum:
        - G
        - KG
        - OZ
        - LB
        - ML
        - L
        - CUP
        - TBSP
        - TSP
        - PIECE
        - CLOVE
        - SLICE
        - PINCH
        - CAN
        - BOTTLE
        - PACKET
        - UNIT
      description: Ingredient measurement unit
      example: CUP

    MediaType:
      type: string
      enum:
        - IMAGE_JPEG
        - IMAGE_PNG
        - IMAGE_GIF
        - IMAGE_WEBP
        - IMAGE_AVIF
        - IMAGE_SVG_XML
        - IMAGE_HEIC
        - IMAGE_TIFF
        - VIDEO_MP4
        - VIDEO_WEBM
        - VIDEO_OGG
        - VIDEO_QUICKTIME
      description: Media MIME type
      example: IMAGE_JPEG

    MediaFormat:
      type: string
      enum: [JPEG, PNG, WEBP, AVIF, GIF, MP4, WEBM, MOV, AVI, MP3, WAV, FLAC, OGG]
      description: Media file format
      example: JPEG

    ProcessingStatus:
      type: string
      enum: [PENDING, PROCESSING, COMPLETE, FAILED]
      description: Media processing status
      example: COMPLETE

    RevisionType:
      type: string
      enum: [ADD, UPDATE, DELETE]
      description: Type of revision change
      example: UPDATE

    RevisionCategory:
      type: string
      enum: [INGREDIENT, STEP]
      description: Category of revised entity
      example: INGREDIENT

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
        - path
      properties:
        error:
          type: string
          description: Error type
          example: "Not Found"
        message:
          type: string
          description: Error message
          example: "Recipe with ID 123 not found"
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2024-08-28T10:30:00Z"
        path:
          type: string
          description: Request path
          example: "/recipes/123"
        details:
          type: object
          additionalProperties: true
          description: Additional error details

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Bad Request"
            message: "Invalid request parameters"
            timestamp: "2024-08-28T10:30:00Z"
            path: "/recipes"

    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Unauthorized"
            message: "JWT token is missing or invalid"
            timestamp: "2024-08-28T10:30:00Z"
            path: "/recipes"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Forbidden"
            message: "You don't have permission to access this resource"
            timestamp: "2024-08-28T10:30:00Z"
            path: "/recipes/123"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Not Found"
            message: "Recipe with ID 123 not found"
            timestamp: "2024-08-28T10:30:00Z"
            path: "/recipes/123"

    Conflict:
      description: Resource already exists or conflicts with current state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Conflict"
            message: "User has already reviewed this recipe"
            timestamp: "2024-08-28T10:30:00Z"
            path: "/recipes/123/review"

    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Validation Error"
            message: "Request validation failed"
            timestamp: "2024-08-28T10:30:00Z"
            path: "/recipes"
            details:
              title: "Title is required"
              servings: "Servings must be positive"

    PayloadTooLarge:
      description: File size exceeds limit
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Payload Too Large"
            message: "File size exceeds maximum limit of 10MB"
            timestamp: "2024-08-28T10:30:00Z"
            path: "/recipes/123/media"

    UnsupportedMediaType:
      description: Unsupported media type
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Unsupported Media Type"
            message: "Media type not supported"
            timestamp: "2024-08-28T10:30:00Z"
            path: "/recipes/123/media"

    InternalServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Internal Server Error"
            message: "An unexpected error occurred"
            timestamp: "2024-08-28T10:30:00Z"
            path: "/recipes"

externalDocs:
  description: Recipe Management Service Documentation
  url: ./API.md
