package com.recipe_manager.model.dto.collection;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;
import java.util.UUID;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

/** Unit tests for CollectionCollaboratorDto. */
@Tag("unit")
class CollectionCollaboratorDtoTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    UUID userId = UUID.randomUUID();
    UUID grantedBy = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();

    CollectionCollaboratorDto dto =
        new CollectionCollaboratorDto(1L, userId, "john_doe", grantedBy, "admin_user", now);

    assertThat(dto.getCollectionId()).isEqualTo(1L);
    assertThat(dto.getUserId()).isEqualTo(userId);
    assertThat(dto.getUsername()).isEqualTo("john_doe");
    assertThat(dto.getGrantedBy()).isEqualTo(grantedBy);
    assertThat(dto.getGrantedByUsername()).isEqualTo("admin_user");
    assertThat(dto.getGrantedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("No-args constructor sets nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    CollectionCollaboratorDto dto = new CollectionCollaboratorDto();

    assertThat(dto.getCollectionId()).isNull();
    assertThat(dto.getUserId()).isNull();
    assertThat(dto.getUsername()).isNull();
    assertThat(dto.getGrantedBy()).isNull();
    assertThat(dto.getGrantedByUsername()).isNull();
    assertThat(dto.getGrantedAt()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields")
  @Tag("standard-processing")
  void builderSetsFields() {
    UUID userId = UUID.randomUUID();
    UUID grantedBy = UUID.randomUUID();

    CollectionCollaboratorDto dto =
        CollectionCollaboratorDto.builder()
            .collectionId(2L)
            .userId(userId)
            .username("jane_smith")
            .grantedBy(grantedBy)
            .grantedByUsername("owner_user")
            .build();

    assertThat(dto.getCollectionId()).isEqualTo(2L);
    assertThat(dto.getUserId()).isEqualTo(userId);
    assertThat(dto.getUsername()).isEqualTo("jane_smith");
    assertThat(dto.getGrantedBy()).isEqualTo(grantedBy);
    assertThat(dto.getGrantedByUsername()).isEqualTo("owner_user");
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    CollectionCollaboratorDto dto = new CollectionCollaboratorDto();
    UUID userId = UUID.randomUUID();
    UUID grantedBy = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();

    dto.setCollectionId(3L);
    dto.setUserId(userId);
    dto.setUsername("alice_wonder");
    dto.setGrantedBy(grantedBy);
    dto.setGrantedByUsername("collection_owner");
    dto.setGrantedAt(now);

    assertThat(dto.getCollectionId()).isEqualTo(3L);
    assertThat(dto.getUserId()).isEqualTo(userId);
    assertThat(dto.getUsername()).isEqualTo("alice_wonder");
    assertThat(dto.getGrantedBy()).isEqualTo(grantedBy);
    assertThat(dto.getGrantedByUsername()).isEqualTo("collection_owner");
    assertThat(dto.getGrantedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    UUID userId = UUID.randomUUID();
    UUID grantedBy = UUID.randomUUID();

    CollectionCollaboratorDto dto1 =
        CollectionCollaboratorDto.builder()
            .collectionId(1L)
            .userId(userId)
            .username("bob_builder")
            .grantedBy(grantedBy)
            .grantedByUsername("admin")
            .build();

    CollectionCollaboratorDto dto2 =
        CollectionCollaboratorDto.builder()
            .collectionId(1L)
            .userId(userId)
            .username("bob_builder")
            .grantedBy(grantedBy)
            .grantedByUsername("admin")
            .build();

    assertThat(dto1).isEqualTo(dto2);
    assertThat(dto1.hashCode()).isEqualTo(dto2.hashCode());
    assertThat(dto1.toString())
        .contains("1", userId.toString(), "bob_builder", grantedBy.toString(), "admin");
  }
}
