package com.recipe_manager.model.dto.collection;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;
import java.util.UUID;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

/** Unit tests for CollectionRecipeDto. */
@Tag("unit")
class CollectionRecipeDtoTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    UUID addedBy = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();

    CollectionRecipeDto dto =
        new CollectionRecipeDto(
            1L, "Chocolate Cookies", "Delicious cookies", 10, addedBy, now);

    assertThat(dto.getRecipeId()).isEqualTo(1L);
    assertThat(dto.getRecipeTitle()).isEqualTo("Chocolate Cookies");
    assertThat(dto.getRecipeDescription()).isEqualTo("Delicious cookies");
    assertThat(dto.getDisplayOrder()).isEqualTo(10);
    assertThat(dto.getAddedBy()).isEqualTo(addedBy);
    assertThat(dto.getAddedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("No-args constructor sets nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    CollectionRecipeDto dto = new CollectionRecipeDto();

    assertThat(dto.getRecipeId()).isNull();
    assertThat(dto.getRecipeTitle()).isNull();
    assertThat(dto.getRecipeDescription()).isNull();
    assertThat(dto.getDisplayOrder()).isNull();
    assertThat(dto.getAddedBy()).isNull();
    assertThat(dto.getAddedAt()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields")
  @Tag("standard-processing")
  void builderSetsFields() {
    UUID addedBy = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();

    CollectionRecipeDto dto =
        CollectionRecipeDto.builder()
            .recipeId(2L)
            .recipeTitle("Pasta Carbonara")
            .recipeDescription("Classic Italian pasta")
            .displayOrder(5)
            .addedBy(addedBy)
            .addedAt(now)
            .build();

    assertThat(dto.getRecipeId()).isEqualTo(2L);
    assertThat(dto.getRecipeTitle()).isEqualTo("Pasta Carbonara");
    assertThat(dto.getRecipeDescription()).isEqualTo("Classic Italian pasta");
    assertThat(dto.getDisplayOrder()).isEqualTo(5);
    assertThat(dto.getAddedBy()).isEqualTo(addedBy);
    assertThat(dto.getAddedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("Builder works with null description")
  @Tag("standard-processing")
  void builderWorksWithNullDescription() {
    UUID addedBy = UUID.randomUUID();

    CollectionRecipeDto dto =
        CollectionRecipeDto.builder()
            .recipeId(3L)
            .recipeTitle("Simple Recipe")
            .recipeDescription(null)
            .displayOrder(15)
            .addedBy(addedBy)
            .build();

    assertThat(dto.getRecipeId()).isEqualTo(3L);
    assertThat(dto.getRecipeTitle()).isEqualTo("Simple Recipe");
    assertThat(dto.getRecipeDescription()).isNull();
    assertThat(dto.getDisplayOrder()).isEqualTo(15);
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    CollectionRecipeDto dto = new CollectionRecipeDto();
    UUID addedBy = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();

    dto.setRecipeId(4L);
    dto.setRecipeTitle("Pizza Margherita");
    dto.setRecipeDescription("Traditional Neapolitan pizza");
    dto.setDisplayOrder(20);
    dto.setAddedBy(addedBy);
    dto.setAddedAt(now);

    assertThat(dto.getRecipeId()).isEqualTo(4L);
    assertThat(dto.getRecipeTitle()).isEqualTo("Pizza Margherita");
    assertThat(dto.getRecipeDescription()).isEqualTo("Traditional Neapolitan pizza");
    assertThat(dto.getDisplayOrder()).isEqualTo(20);
    assertThat(dto.getAddedBy()).isEqualTo(addedBy);
    assertThat(dto.getAddedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    UUID addedBy = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();

    CollectionRecipeDto dto1 =
        CollectionRecipeDto.builder()
            .recipeId(1L)
            .recipeTitle("Test Recipe")
            .recipeDescription("Test Description")
            .displayOrder(10)
            .addedBy(addedBy)
            .addedAt(now)
            .build();

    CollectionRecipeDto dto2 =
        CollectionRecipeDto.builder()
            .recipeId(1L)
            .recipeTitle("Test Recipe")
            .recipeDescription("Test Description")
            .displayOrder(10)
            .addedBy(addedBy)
            .addedAt(now)
            .build();

    assertThat(dto1).isEqualTo(dto2);
    assertThat(dto1.hashCode()).isEqualTo(dto2.hashCode());
    assertThat(dto1.toString()).contains("1", "Test Recipe", "10");
  }
}
