package com.recipe_manager.model.dto.collection;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;
import java.util.UUID;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

/** Unit tests for RecipeCollectionItemDto. */
@Tag("unit")
class RecipeCollectionItemDtoTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    UUID addedBy = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();

    RecipeCollectionItemDto dto = new RecipeCollectionItemDto(1L, 2L, 10, addedBy, now);

    assertThat(dto.getCollectionId()).isEqualTo(1L);
    assertThat(dto.getRecipeId()).isEqualTo(2L);
    assertThat(dto.getDisplayOrder()).isEqualTo(10);
    assertThat(dto.getAddedBy()).isEqualTo(addedBy);
    assertThat(dto.getAddedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("No-args constructor sets nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    RecipeCollectionItemDto dto = new RecipeCollectionItemDto();

    assertThat(dto.getCollectionId()).isNull();
    assertThat(dto.getRecipeId()).isNull();
    assertThat(dto.getDisplayOrder()).isNull();
    assertThat(dto.getAddedBy()).isNull();
    assertThat(dto.getAddedAt()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields")
  @Tag("standard-processing")
  void builderSetsFields() {
    UUID addedBy = UUID.randomUUID();

    RecipeCollectionItemDto dto =
        RecipeCollectionItemDto.builder()
            .collectionId(3L)
            .recipeId(4L)
            .displayOrder(20)
            .addedBy(addedBy)
            .build();

    assertThat(dto.getCollectionId()).isEqualTo(3L);
    assertThat(dto.getRecipeId()).isEqualTo(4L);
    assertThat(dto.getDisplayOrder()).isEqualTo(20);
    assertThat(dto.getAddedBy()).isEqualTo(addedBy);
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    RecipeCollectionItemDto dto = new RecipeCollectionItemDto();
    UUID addedBy = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();

    dto.setCollectionId(5L);
    dto.setRecipeId(6L);
    dto.setDisplayOrder(30);
    dto.setAddedBy(addedBy);
    dto.setAddedAt(now);

    assertThat(dto.getCollectionId()).isEqualTo(5L);
    assertThat(dto.getRecipeId()).isEqualTo(6L);
    assertThat(dto.getDisplayOrder()).isEqualTo(30);
    assertThat(dto.getAddedBy()).isEqualTo(addedBy);
    assertThat(dto.getAddedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    UUID addedBy = UUID.randomUUID();

    RecipeCollectionItemDto dto1 =
        RecipeCollectionItemDto.builder()
            .collectionId(1L)
            .recipeId(2L)
            .displayOrder(10)
            .addedBy(addedBy)
            .build();

    RecipeCollectionItemDto dto2 =
        RecipeCollectionItemDto.builder()
            .collectionId(1L)
            .recipeId(2L)
            .displayOrder(10)
            .addedBy(addedBy)
            .build();

    assertThat(dto1).isEqualTo(dto2);
    assertThat(dto1.hashCode()).isEqualTo(dto2.hashCode());
    assertThat(dto1.toString()).contains("1", "2", "10");
  }
}
