package com.recipe_manager.model.dto.ingredient;

import static org.assertj.core.api.Assertions.assertThat;

import com.recipe_manager.model.enums.IngredientUnit;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class QuantityDtoTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    QuantityDto dto = new QuantityDto(2.5, IngredientUnit.CUP);

    assertThat(dto.getAmount()).isEqualTo(2.5);
    assertThat(dto.getMeasurement()).isEqualTo(IngredientUnit.CUP);
  }

  @Test
  @DisplayName("No-args constructor sets defaults and nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    QuantityDto dto = new QuantityDto();

    assertThat(dto.getAmount()).isEqualTo(0.0);
    assertThat(dto.getMeasurement()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    QuantityDto dto = QuantityDto.builder()
        .amount(1.5)
        .measurement(IngredientUnit.TSP)
        .build();

    assertThat(dto.getAmount()).isEqualTo(1.5);
    assertThat(dto.getMeasurement()).isEqualTo(IngredientUnit.TSP);
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    QuantityDto dto = new QuantityDto();

    dto.setAmount(3.25);
    assertThat(dto.getAmount()).isEqualTo(3.25);

    dto.setMeasurement(IngredientUnit.TBSP);
    assertThat(dto.getMeasurement()).isEqualTo(IngredientUnit.TBSP);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    QuantityDto dto1 = QuantityDto.builder()
        .amount(2.0)
        .measurement(IngredientUnit.CUP)
        .build();
    QuantityDto dto2 = QuantityDto.builder()
        .amount(2.0)
        .measurement(IngredientUnit.CUP)
        .build();

    assertThat(dto1).isEqualTo(dto2);
    assertThat(dto1.hashCode()).isEqualTo(dto2.hashCode());
    assertThat(dto1.toString()).contains("2.0");
    assertThat(dto1.toString()).contains("CUP");
  }

  @Test
  @DisplayName("Null handling for measurement field")
  @Tag("error-processing")
  void nullHandlingForMeasurement() {
    QuantityDto dto = QuantityDto.builder()
        .amount(1.0)
        .measurement(null)
        .build();

    assertThat(dto.getAmount()).isEqualTo(1.0);
    assertThat(dto.getMeasurement()).isNull();
  }

  @Test
  @DisplayName("Negative amount values are allowed")
  @Tag("standard-processing")
  void negativeAmountValuesAllowed() {
    QuantityDto dto = QuantityDto.builder()
        .amount(-1.5)
        .measurement(IngredientUnit.G)
        .build();

    assertThat(dto.getAmount()).isEqualTo(-1.5);
    assertThat(dto.getMeasurement()).isEqualTo(IngredientUnit.G);
  }

  @Test
  @DisplayName("Zero amount values are allowed")
  @Tag("standard-processing")
  void zeroAmountValuesAllowed() {
    QuantityDto dto = QuantityDto.builder()
        .amount(0.0)
        .measurement(IngredientUnit.PIECE)
        .build();

    assertThat(dto.getAmount()).isEqualTo(0.0);
    assertThat(dto.getMeasurement()).isEqualTo(IngredientUnit.PIECE);
  }
}
