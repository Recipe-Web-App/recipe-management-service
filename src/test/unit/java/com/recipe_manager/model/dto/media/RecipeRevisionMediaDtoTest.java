package com.recipe_manager.model.dto.media;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class RecipeRevisionMediaDtoTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    LocalDateTime now = LocalDateTime.now();
    RecipeRevisionMediaDto dto = RecipeRevisionMediaDto.builder()
        .mediaId(1L)
        .url("url")
        .altText("alt")
        .contentType("type")
        .fileSize(123L)
        .createdAt(now)
        .updatedAt(now)
        .recipeId(2L)
        .revisionNumber(3)
        .build();
    assertThat(dto.getMediaId()).isEqualTo(1L);
    assertThat(dto.getRecipeId()).isEqualTo(2L);
    assertThat(dto.getRevisionNumber()).isEqualTo(3);
    assertThat(dto.getUrl()).isEqualTo("url");
    assertThat(dto.getAltText()).isEqualTo("alt");
    assertThat(dto.getContentType()).isEqualTo("type");
    assertThat(dto.getFileSize()).isEqualTo(123L);
    assertThat(dto.getCreatedAt()).isEqualTo(now);
    assertThat(dto.getUpdatedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    RecipeRevisionMediaDto dto = RecipeRevisionMediaDto.builder().mediaId(1L).recipeId(2L).revisionNumber(3).build();
    assertThat(dto.getMediaId()).isEqualTo(1L);
    assertThat(dto.getRecipeId()).isEqualTo(2L);
    assertThat(dto.getRevisionNumber()).isEqualTo(3);
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    RecipeRevisionMediaDto dto = new RecipeRevisionMediaDto();
    dto.setRevisionNumber(5);
    assertThat(dto.getRevisionNumber()).isEqualTo(5);
    dto.setRecipeId(6L);
    assertThat(dto.getRecipeId()).isEqualTo(6L);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    RecipeRevisionMediaDto dto1 = RecipeRevisionMediaDto.builder().mediaId(1L).revisionNumber(2).build();
    RecipeRevisionMediaDto dto2 = RecipeRevisionMediaDto.builder().mediaId(1L).revisionNumber(2).build();
    assertThat(dto1).isEqualTo(dto2);
    assertThat(dto1.hashCode()).isEqualTo(dto2.hashCode());
    assertThat(dto1.toString()).contains("revisionNumber=2");
  }

  @Test
  @DisplayName("Null handling for all fields")
  @Tag("error-processing")
  void nullHandlingForAllFields() {
    RecipeRevisionMediaDto dto = new RecipeRevisionMediaDto();
    assertThat(dto.getMediaId()).isNull();
    assertThat(dto.getRecipeId()).isNull();
    assertThat(dto.getRevisionNumber()).isNull();
    assertThat(dto.getUrl()).isNull();
    assertThat(dto.getAltText()).isNull();
    assertThat(dto.getContentType()).isNull();
    assertThat(dto.getFileSize()).isNull();
    assertThat(dto.getCreatedAt()).isNull();
    assertThat(dto.getUpdatedAt()).isNull();
  }
}
