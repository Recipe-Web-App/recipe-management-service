package com.recipe_manager.model.dto.media;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

import lombok.experimental.SuperBuilder;

@SuperBuilder
public class TestMediaDto extends MediaDto {
  // This class inherits builder and constructors from MediaDto
  // Used for testing builder functionality
}

@Tag("unit")
class MediaDtoTest {
  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    LocalDateTime now = LocalDateTime.now();
    MediaDto dto = TestMediaDto.builder().mediaId(2L).url("u").altText("a").contentType("c").fileSize(1L).createdAt(now)
        .updatedAt(now).build();
    assertThat(dto.getMediaId()).isEqualTo(2L);
    assertThat(dto.getUrl()).isEqualTo("u");
    assertThat(dto.getAltText()).isEqualTo("a");
    assertThat(dto.getContentType()).isEqualTo("c");
    assertThat(dto.getFileSize()).isEqualTo(1L);
    assertThat(dto.getCreatedAt()).isEqualTo(now);
    assertThat(dto.getUpdatedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    MediaDto dto = TestMediaDto.builder().build();
    dto.setMediaId(3L);
    assertThat(dto.getMediaId()).isEqualTo(3L);
    dto.setUrl("url");
    assertThat(dto.getUrl()).isEqualTo("url");
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    MediaDto dto1 = TestMediaDto.builder().mediaId(1L).url("url").altText("alt").contentType("type")
        .fileSize(123L).createdAt(null).updatedAt(null).build();
    MediaDto dto2 = TestMediaDto.builder().mediaId(1L).url("url").altText("alt").contentType("type")
        .fileSize(123L).createdAt(null).updatedAt(null).build();
    assertThat(dto1).isEqualTo(dto2);
    assertThat(dto1.hashCode()).isEqualTo(dto2.hashCode());
    assertThat(dto1.toString()).contains("url");
  }

  @Test
  @DisplayName("Null handling for all fields")
  @Tag("error-processing")
  void nullHandlingForAllFields() {
    MediaDto dto = TestMediaDto.builder().build();
    assertThat(dto.getMediaId()).isNull();
    assertThat(dto.getUrl()).isNull();
    assertThat(dto.getAltText()).isNull();
    assertThat(dto.getContentType()).isNull();
    assertThat(dto.getFileSize()).isNull();
    assertThat(dto.getCreatedAt()).isNull();
    assertThat(dto.getUpdatedAt()).isNull();
  }
}
