package com.recipe_manager.model.dto.recipe;

import static org.assertj.core.api.Assertions.assertThat;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.recipe_manager.model.enums.DifficultyLevel;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class RecipeDtoTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    List<RecipeIngredientDto> ingredients = new ArrayList<>();
    List<RecipeStepDto> steps = new ArrayList<>();
    List<RecipeTagDto> tags = new ArrayList<>();
    List<RecipeRevisionDto> revisions = new ArrayList<>();
    List<RecipeFavoriteDto> favorites = new ArrayList<>();
    UUID userId = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();
    RecipeDto dto = new RecipeDto(1L, userId, "title", "desc", "url",
        BigDecimal.ONE, 10, 20, DifficultyLevel.EASY, now, now,
        ingredients, steps, tags, revisions, favorites);
    assertThat(dto.getRecipeId()).isEqualTo(1L);
    assertThat(dto.getUserId()).isEqualTo(userId);
    assertThat(dto.getTitle()).isEqualTo("title");
    assertThat(dto.getDescription()).isEqualTo("desc");
    assertThat(dto.getOriginUrl()).isEqualTo("url");
    assertThat(dto.getServings()).isEqualTo(BigDecimal.ONE);
    assertThat(dto.getPreparationTime()).isEqualTo(10);
    assertThat(dto.getCookingTime()).isEqualTo(20);
    assertThat(dto.getDifficulty()).isEqualTo(DifficultyLevel.EASY);
    assertThat(dto.getCreatedAt()).isEqualTo(now);
    assertThat(dto.getUpdatedAt()).isEqualTo(now);
    assertThat(dto.getIngredients()).isSameAs(ingredients);
    assertThat(dto.getSteps()).isSameAs(steps);
    assertThat(dto.getTags()).isSameAs(tags);
    assertThat(dto.getRevisions()).isSameAs(revisions);
    assertThat(dto.getFavorites()).isSameAs(favorites);
  }

  @Test
  @DisplayName("No-args constructor sets defaults and nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    RecipeDto dto = new RecipeDto();
    assertThat(dto.getIngredients()).isNotNull();
    assertThat(dto.getIngredients()).isEmpty();
    assertThat(dto.getSteps()).isNotNull();
    assertThat(dto.getTags()).isNotNull();
    assertThat(dto.getRevisions()).isNotNull();
    assertThat(dto.getFavorites()).isNotNull();
    assertThat(dto.getTitle()).isNull();
    assertThat(dto.getUserId()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    RecipeDto dto = RecipeDto.builder().title("T").build();
    assertThat(dto.getTitle()).isEqualTo("T");
    assertThat(dto.getIngredients()).isNotNull();
    assertThat(dto.getIngredients()).isEmpty();
    assertThat(dto.getSteps()).isNotNull();
    assertThat(dto.getTags()).isNotNull();
    assertThat(dto.getRevisions()).isNotNull();
    assertThat(dto.getFavorites()).isNotNull();
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    RecipeDto dto = new RecipeDto();
    dto.setTitle("T");
    assertThat(dto.getTitle()).isEqualTo("T");
    List<RecipeIngredientDto> list = new ArrayList<>();
    dto.setIngredients(list);
    assertThat(dto.getIngredients()).isSameAs(list);
  }

  @Test
  @DisplayName("List mutability is direct (no defensive copy)")
  @Tag("standard-processing")
  void listMutabilityIsDirect() {
    RecipeDto dto = new RecipeDto();
    List<RecipeIngredientDto> list = new ArrayList<>();
    dto.setIngredients(list);
    list.add(new RecipeIngredientDto());
    assertThat(dto.getIngredients()).hasSize(1);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    RecipeDto dto1 = RecipeDto.builder().title("A").build();
    RecipeDto dto2 = RecipeDto.builder().title("A").build();
    assertThat(dto1).isEqualTo(dto2);
    assertThat(dto1.hashCode()).isEqualTo(dto2.hashCode());
    assertThat(dto1.toString()).contains("A");
  }

  @Test
  @DisplayName("Null handling for all fields")
  @Tag("error-processing")

  void nullHandlingForAllFields() {
    RecipeDto dto = RecipeDto.builder().build();
    assertThat(dto.getRecipeId()).isNull();
    assertThat(dto.getUserId()).isNull();
    assertThat(dto.getTitle()).isNull();
    assertThat(dto.getDescription()).isNull();
    assertThat(dto.getOriginUrl()).isNull();
    assertThat(dto.getServings()).isNull();
    assertThat(dto.getPreparationTime()).isNull();
    assertThat(dto.getCookingTime()).isNull();
    assertThat(dto.getDifficulty()).isNull();
    assertThat(dto.getCreatedAt()).isNull();
    assertThat(dto.getUpdatedAt()).isNull();
    assertThat(dto.getIngredients()).isEmpty();
    assertThat(dto.getSteps()).isEmpty();
    assertThat(dto.getTags()).isEmpty();
    assertThat(dto.getRevisions()).isEmpty();
    assertThat(dto.getFavorites()).isEmpty();
  }
}
