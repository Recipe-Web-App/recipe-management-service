package com.recipe_manager.model.dto.recipe;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.recipe_manager.model.dto.media.RecipeFavoriteMediaDto;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class RecipeFavoriteDtoTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    List<RecipeFavoriteMediaDto> media = new ArrayList<>();
    UUID userId = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();
    RecipeFavoriteDto dto = new RecipeFavoriteDto(1L, userId, now, now, now, media);
    assertThat(dto.getRecipeId()).isEqualTo(1L);
    assertThat(dto.getUserId()).isEqualTo(userId);
    assertThat(dto.getFavoritedAt()).isEqualTo(now);
    assertThat(dto.getCreatedAt()).isEqualTo(now);
    assertThat(dto.getUpdatedAt()).isEqualTo(now);
    assertThat(dto.getMedia()).isSameAs(media);
  }

  @Test
  @DisplayName("No-args constructor sets defaults and nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    RecipeFavoriteDto dto = new RecipeFavoriteDto();
    assertThat(dto.getMedia()).isNotNull();
    assertThat(dto.getMedia()).isEmpty();
    assertThat(dto.getUserId()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    RecipeFavoriteDto dto = RecipeFavoriteDto.builder().favoritedAt(LocalDateTime.now()).build();
    assertThat(dto.getFavoritedAt()).isNotNull();
    assertThat(dto.getMedia()).isNotNull();
    assertThat(dto.getMedia()).isEmpty();
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    RecipeFavoriteDto dto = new RecipeFavoriteDto();
    UUID userId = UUID.randomUUID();
    dto.setUserId(userId);
    assertThat(dto.getUserId()).isEqualTo(userId);
    List<RecipeFavoriteMediaDto> list = new ArrayList<>();
    dto.setMedia(list);
    assertThat(dto.getMedia()).isSameAs(list);
  }

  @Test
  @DisplayName("List mutability is direct (no defensive copy)")
  @Tag("standard-processing")
  void listMutabilityIsDirect() {
    RecipeFavoriteDto dto = new RecipeFavoriteDto();
    List<RecipeFavoriteMediaDto> list = new ArrayList<>();
    dto.setMedia(list);
    list.add(new RecipeFavoriteMediaDto());
    assertThat(dto.getMedia()).hasSize(1);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    RecipeFavoriteDto dto1 = RecipeFavoriteDto.builder().favoritedAt(LocalDateTime.now()).build();
    RecipeFavoriteDto dto2 = RecipeFavoriteDto.builder().favoritedAt(dto1.getFavoritedAt()).build();
    assertThat(dto1).isEqualTo(dto2);
    assertThat(dto1.hashCode()).isEqualTo(dto2.hashCode());
    assertThat(dto1.toString()).contains("favoritedAt");
  }

  @Test
  @DisplayName("Null handling for all fields")
  @Tag("error-processing")
  void nullHandlingForAllFields() {
    RecipeFavoriteDto dto = RecipeFavoriteDto.builder().build();
    assertThat(dto.getRecipeId()).isNull();
    assertThat(dto.getUserId()).isNull();
    assertThat(dto.getFavoritedAt()).isNull();
    assertThat(dto.getCreatedAt()).isNull();
    assertThat(dto.getUpdatedAt()).isNull();
    assertThat(dto.getMedia()).isNotNull();
    assertThat(dto.getMedia()).isEmpty();
  }
}
