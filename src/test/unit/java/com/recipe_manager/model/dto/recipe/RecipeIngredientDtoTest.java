package com.recipe_manager.model.dto.recipe;

import static org.assertj.core.api.Assertions.assertThat;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.recipe_manager.model.dto.ingredient.IngredientCommentDto;
import com.recipe_manager.model.enums.IngredientUnit;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class RecipeIngredientDtoTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    IngredientCommentDto comment = IngredientCommentDto.builder()
        .commentId(1L)
        .commentText("Test comment")
        .build();
    List<IngredientCommentDto> comments = Arrays.asList(comment);

    RecipeIngredientDto dto = new RecipeIngredientDto(
        1L,
        2L,
        "name",
        BigDecimal.TEN,
        IngredientUnit.G,
        true,
        comments);
    assertThat(dto.getRecipeId()).isEqualTo(1L);
    assertThat(dto.getIngredientId()).isEqualTo(2L);
    assertThat(dto.getIngredientName()).isEqualTo("name");
    assertThat(dto.getQuantity()).isEqualTo(BigDecimal.TEN);
    assertThat(dto.getUnit()).isEqualTo(IngredientUnit.G);
    assertThat(dto.getIsOptional()).isTrue();
    assertThat(dto.getComments()).isEqualTo(comments);
  }

  @Test
  @DisplayName("No-args constructor sets defaults and nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    RecipeIngredientDto dto = new RecipeIngredientDto();
    assertThat(dto.getIngredientName()).isNull();
    assertThat(dto.getRecipeId()).isNull();
    assertThat(dto.getIngredientId()).isNull();
    assertThat(dto.getComments()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    RecipeIngredientDto dto = RecipeIngredientDto.builder().ingredientName("N").build();
    assertThat(dto.getIngredientName()).isEqualTo("N");
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    RecipeIngredientDto dto = new RecipeIngredientDto();
    dto.setIngredientName("N");
    assertThat(dto.getIngredientName()).isEqualTo("N");

    dto.setQuantity(BigDecimal.valueOf(5.5));
    assertThat(dto.getQuantity()).isEqualTo(BigDecimal.valueOf(5.5));
  }

  @Test
  @DisplayName("Unit and optional fields work correctly")
  @Tag("standard-processing")
  void unitAndOptionalFields() {
    RecipeIngredientDto dto = new RecipeIngredientDto();
    dto.setUnit(IngredientUnit.CUP);
    assertThat(dto.getUnit()).isEqualTo(IngredientUnit.CUP);

    dto.setIsOptional(true);
    assertThat(dto.getIsOptional()).isTrue();
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    RecipeIngredientDto dto1 = RecipeIngredientDto.builder().ingredientName("A").build();
    RecipeIngredientDto dto2 = RecipeIngredientDto.builder().ingredientName("A").build();
    assertThat(dto1).isEqualTo(dto2);
    assertThat(dto1.hashCode()).isEqualTo(dto2.hashCode());
    assertThat(dto1.toString()).contains("A");
  }

  @Test
  @DisplayName("Null handling for all fields")
  @Tag("error-processing")
  void nullHandlingForAllFields() {
    RecipeIngredientDto dto = RecipeIngredientDto.builder().build();
    assertThat(dto.getRecipeId()).isNull();
    assertThat(dto.getIngredientId()).isNull();
    assertThat(dto.getIngredientName()).isNull();
    assertThat(dto.getQuantity()).isNull();
    assertThat(dto.getUnit()).isNull();
    assertThat(dto.getIsOptional()).isNull();
    assertThat(dto.getComments()).isNull();
  }

  @Test
  @DisplayName("Comments field works correctly")
  @Tag("standard-processing")
  void commentsFieldWorksCorrectly() {
    IngredientCommentDto comment1 = IngredientCommentDto.builder()
        .commentId(1L)
        .recipeId(123L)
        .userId(UUID.randomUUID())
        .commentText("Great ingredient!")
        .isPublic(true)
        .createdAt(LocalDateTime.now())
        .build();

    IngredientCommentDto comment2 = IngredientCommentDto.builder()
        .commentId(2L)
        .recipeId(123L)
        .userId(UUID.randomUUID())
        .commentText("Very fresh")
        .isPublic(false)
        .createdAt(LocalDateTime.now())
        .build();

    List<IngredientCommentDto> comments = Arrays.asList(comment1, comment2);

    RecipeIngredientDto dto = new RecipeIngredientDto();
    dto.setComments(comments);

    assertThat(dto.getComments()).hasSize(2);
    assertThat(dto.getComments()).containsExactly(comment1, comment2);
    assertThat(dto.getComments().get(0).getCommentText()).isEqualTo("Great ingredient!");
    assertThat(dto.getComments().get(1).getCommentText()).isEqualTo("Very fresh");
  }

  @Test
  @DisplayName("Empty comments list works correctly")
  @Tag("standard-processing")
  void emptyCommentsListWorksCorrectly() {
    RecipeIngredientDto dto = RecipeIngredientDto.builder()
        .ingredientName("Salt")
        .comments(Arrays.asList())
        .build();

    assertThat(dto.getComments()).isEmpty();
    assertThat(dto.getIngredientName()).isEqualTo("Salt");
  }
}
