package com.recipe_manager.model.dto.recipe;

import static org.assertj.core.api.Assertions.assertThat;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import com.recipe_manager.model.dto.media.RecipeIngredientMediaDto;
import com.recipe_manager.model.enums.IngredientUnit;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class RecipeIngredientDtoTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    List<RecipeIngredientMediaDto> media = new ArrayList<>();
    LocalDateTime now = LocalDateTime.now();
    RecipeIngredientDto dto = new RecipeIngredientDto(
        1L,
        2L,
        "name",
        BigDecimal.TEN,
        IngredientUnit.G,
        true,
        "notes",
        now,
        now,
        media);
    assertThat(dto.getRecipeId()).isEqualTo(1L);
    assertThat(dto.getIngredientId()).isEqualTo(2L);
    assertThat(dto.getIngredientName()).isEqualTo("name");
    assertThat(dto.getQuantity()).isEqualTo(BigDecimal.TEN);
    assertThat(dto.getUnit()).isEqualTo(IngredientUnit.G);
    assertThat(dto.getIsOptional()).isTrue();
    assertThat(dto.getNotes()).isEqualTo("notes");
    assertThat(dto.getCreatedAt()).isEqualTo(now);
    assertThat(dto.getUpdatedAt()).isEqualTo(now);
    assertThat(dto.getMedia()).isSameAs(media);
  }

  @Test
  @DisplayName("No-args constructor sets defaults and nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    RecipeIngredientDto dto = new RecipeIngredientDto();
    assertThat(dto.getMedia()).isNotNull();
    assertThat(dto.getMedia()).isEmpty();
    assertThat(dto.getIngredientName()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    RecipeIngredientDto dto = RecipeIngredientDto.builder().ingredientName("N").build();
    assertThat(dto.getIngredientName()).isEqualTo("N");
    assertThat(dto.getMedia()).isNotNull();
    assertThat(dto.getMedia()).isEmpty();
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    RecipeIngredientDto dto = new RecipeIngredientDto();
    dto.setIngredientName("N");
    assertThat(dto.getIngredientName()).isEqualTo("N");
    List<RecipeIngredientMediaDto> list = new ArrayList<>();
    dto.setMedia(list);
    assertThat(dto.getMedia()).isSameAs(list);
  }

  @Test
  @DisplayName("List mutability is direct (no defensive copy)")
  @Tag("standard-processing")
  void listMutabilityIsDirect() {
    RecipeIngredientDto dto = new RecipeIngredientDto();
    List<RecipeIngredientMediaDto> list = new ArrayList<>();
    dto.setMedia(list);
    list.add(new RecipeIngredientMediaDto());
    assertThat(dto.getMedia()).hasSize(1);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    RecipeIngredientDto dto1 = RecipeIngredientDto.builder().ingredientName("A").build();
    RecipeIngredientDto dto2 = RecipeIngredientDto.builder().ingredientName("A").build();
    assertThat(dto1).isEqualTo(dto2);
    assertThat(dto1.hashCode()).isEqualTo(dto2.hashCode());
    assertThat(dto1.toString()).contains("A");
  }

  @Test
  @DisplayName("Null handling for all fields")
  @Tag("error-processing")
  void nullHandlingForAllFields() {
    RecipeIngredientDto dto = RecipeIngredientDto.builder().build();
    assertThat(dto.getRecipeId()).isNull();
    assertThat(dto.getIngredientId()).isNull();
    assertThat(dto.getIngredientName()).isNull();
    assertThat(dto.getQuantity()).isNull();
    assertThat(dto.getUnit()).isNull();
    assertThat(dto.getIsOptional()).isNull();
    assertThat(dto.getNotes()).isNull();
    assertThat(dto.getCreatedAt()).isNull();
    assertThat(dto.getUpdatedAt()).isNull();
    assertThat(dto.getMedia()).isEmpty();
  }
}
