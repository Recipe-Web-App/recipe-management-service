package com.recipe_manager.model.dto.recipe;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;
import java.util.UUID;

import com.recipe_manager.model.enums.RevisionCategory;
import com.recipe_manager.model.enums.RevisionType;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class RecipeRevisionDtoTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    UUID userId = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();
    RecipeRevisionDto dto = new RecipeRevisionDto(1L, 2L, userId, RevisionCategory.INGREDIENT, RevisionType.ADD, "prev",
        "new", "comment", now);
    assertThat(dto.getRevisionId()).isEqualTo(1L);
    assertThat(dto.getRecipeId()).isEqualTo(2L);
    assertThat(dto.getUserId()).isEqualTo(userId);
    assertThat(dto.getRevisionCategory()).isEqualTo(RevisionCategory.INGREDIENT);
    assertThat(dto.getRevisionType()).isEqualTo(RevisionType.ADD);
    assertThat(dto.getPreviousData()).isEqualTo("prev");
    assertThat(dto.getNewData()).isEqualTo("new");
    assertThat(dto.getChangeComment()).isEqualTo("comment");
    assertThat(dto.getCreatedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("No-args constructor sets defaults and nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    RecipeRevisionDto dto = new RecipeRevisionDto();
    assertThat(dto.getPreviousData()).isNull();
    assertThat(dto.getRevisionId()).isNull();
    assertThat(dto.getRecipeId()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    RecipeRevisionDto dto = RecipeRevisionDto.builder().changeComment("C").build();
    assertThat(dto.getChangeComment()).isEqualTo("C");
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    RecipeRevisionDto dto = new RecipeRevisionDto();
    dto.setChangeComment("desc");
    assertThat(dto.getChangeComment()).isEqualTo("desc");

    dto.setRevisionCategory(RevisionCategory.STEP);
    assertThat(dto.getRevisionCategory()).isEqualTo(RevisionCategory.STEP);
  }

  @Test
  @DisplayName("JSON data fields work correctly")
  @Tag("standard-processing")
  void jsonDataFields() {
    RecipeRevisionDto dto = new RecipeRevisionDto();
    dto.setPreviousData("{\"old\": \"value\"}");
    assertThat(dto.getPreviousData()).isEqualTo("{\"old\": \"value\"}");

    dto.setNewData("{\"new\": \"value\"}");
    assertThat(dto.getNewData()).isEqualTo("{\"new\": \"value\"}");
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    RecipeRevisionDto dto1 = RecipeRevisionDto.builder().changeComment("A").build();
    RecipeRevisionDto dto2 = RecipeRevisionDto.builder().changeComment("A").build();
    assertThat(dto1).isEqualTo(dto2);
    assertThat(dto1.hashCode()).isEqualTo(dto2.hashCode());
    assertThat(dto1.toString()).contains("A");
  }

  @Test
  @DisplayName("Null handling for all fields")
  @Tag("error-processing")
  void nullHandlingForAllFields() {
    RecipeRevisionDto dto = new RecipeRevisionDto(null, null, null, null, null, null, null, null, null);
    assertThat(dto.getRevisionId()).isNull();
    assertThat(dto.getRecipeId()).isNull();
    assertThat(dto.getUserId()).isNull();
    assertThat(dto.getRevisionCategory()).isNull();
    assertThat(dto.getRevisionType()).isNull();
    assertThat(dto.getPreviousData()).isNull();
    assertThat(dto.getNewData()).isNull();
    assertThat(dto.getChangeComment()).isNull();
    assertThat(dto.getCreatedAt()).isNull();
  }
}
