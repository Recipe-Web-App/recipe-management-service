package com.recipe_manager.model.dto.recipe;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import com.recipe_manager.model.dto.media.RecipeTagMediaDto;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class RecipeTagDtoTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    List<RecipeTagMediaDto> media = new ArrayList<>();
    LocalDateTime now = LocalDateTime.now();
    RecipeTagDto dto = new RecipeTagDto(1L, 2L, "name", now, now, media);
    assertThat(dto.getRecipeId()).isEqualTo(1L);
    assertThat(dto.getTagId()).isEqualTo(2L);
    assertThat(dto.getName()).isEqualTo("name");
    assertThat(dto.getCreatedAt()).isEqualTo(now);
    assertThat(dto.getUpdatedAt()).isEqualTo(now);
    assertThat(dto.getMedia()).isSameAs(media);
  }

  @Test
  @DisplayName("No-args constructor sets defaults and nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    RecipeTagDto dto = new RecipeTagDto();
    assertThat(dto.getMedia()).isNotNull();
    assertThat(dto.getMedia()).isEmpty();
    assertThat(dto.getName()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    RecipeTagDto dto = RecipeTagDto.builder().name("T").build();
    assertThat(dto.getName()).isEqualTo("T");
    assertThat(dto.getMedia()).isNotNull();
    assertThat(dto.getMedia()).isEmpty();
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    RecipeTagDto dto = new RecipeTagDto();
    dto.setName("T");
    assertThat(dto.getName()).isEqualTo("T");
    List<RecipeTagMediaDto> list = new ArrayList<>();
    dto.setMedia(list);
    assertThat(dto.getMedia()).isSameAs(list);
  }

  @Test
  @DisplayName("List mutability is direct (no defensive copy)")
  @Tag("standard-processing")
  void listMutabilityIsDirect() {
    RecipeTagDto dto = new RecipeTagDto();
    List<RecipeTagMediaDto> list = new ArrayList<>();
    dto.setMedia(list);
    list.add(new RecipeTagMediaDto());
    assertThat(dto.getMedia()).hasSize(1);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    RecipeTagDto dto1 = RecipeTagDto.builder().name("A").build();
    RecipeTagDto dto2 = RecipeTagDto.builder().name("A").build();
    assertThat(dto1).isEqualTo(dto2);
    assertThat(dto1.hashCode()).isEqualTo(dto2.hashCode());
    assertThat(dto1.toString()).contains("A");
  }

  @Test
  @DisplayName("Null handling for all fields")
  @Tag("error-processing")
  void nullHandlingForAllFields() {
    RecipeTagDto dto = new RecipeTagDto(null, null, null, null, null, null);
    assertThat(dto.getRecipeId()).isNull();
    assertThat(dto.getTagId()).isNull();
    assertThat(dto.getName()).isNull();
    assertThat(dto.getCreatedAt()).isNull();
    assertThat(dto.getUpdatedAt()).isNull();
    assertThat(dto.getMedia()).isNull();
  }
}
