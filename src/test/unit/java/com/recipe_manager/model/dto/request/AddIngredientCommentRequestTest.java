package com.recipe_manager.model.dto.request;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.Set;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class AddIngredientCommentRequestTest {

  private Validator validator;

  @BeforeEach
  void setUp() {
    ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
    validator = factory.getValidator();
  }

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    AddIngredientCommentRequest request = new AddIngredientCommentRequest("Test comment");

    assertThat(request.getComment()).isEqualTo("Test comment");
  }

  @Test
  @DisplayName("No-args constructor sets defaults and nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    AddIngredientCommentRequest request = new AddIngredientCommentRequest();

    assertThat(request.getComment()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    AddIngredientCommentRequest request = AddIngredientCommentRequest.builder()
        .comment("Test comment")
        .build();

    assertThat(request.getComment()).isEqualTo("Test comment");
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    AddIngredientCommentRequest request = new AddIngredientCommentRequest();

    request.setComment("New comment");
    assertThat(request.getComment()).isEqualTo("New comment");
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    AddIngredientCommentRequest request1 = AddIngredientCommentRequest.builder()
        .comment("Same comment")
        .build();
    AddIngredientCommentRequest request2 = AddIngredientCommentRequest.builder()
        .comment("Same comment")
        .build();

    assertThat(request1).isEqualTo(request2);
    assertThat(request1.hashCode()).isEqualTo(request2.hashCode());
    assertThat(request1.toString()).contains("Same comment");
  }

  @Test
  @DisplayName("Valid comment passes validation")
  @Tag("standard-processing")
  void validCommentPassesValidation() {
    AddIngredientCommentRequest request = AddIngredientCommentRequest.builder()
        .comment("This is a valid comment")
        .build();

    Set<ConstraintViolation<AddIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
  }

  @Test
  @DisplayName("Null comment fails validation")
  @Tag("error-processing")
  void nullCommentFailsValidation() {
    AddIngredientCommentRequest request = AddIngredientCommentRequest.builder()
        .comment(null)
        .build();

    Set<ConstraintViolation<AddIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).hasSize(1);
    assertThat(violations.iterator().next().getMessage()).isEqualTo("Comment text cannot be blank");
  }

  @Test
  @DisplayName("Empty comment fails validation")
  @Tag("error-processing")
  void emptyCommentFailsValidation() {
    AddIngredientCommentRequest request = AddIngredientCommentRequest.builder()
        .comment("")
        .build();

    Set<ConstraintViolation<AddIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).hasSize(1);
    assertThat(violations.iterator().next().getMessage()).isEqualTo("Comment text cannot be blank");
  }

  @Test
  @DisplayName("Blank comment fails validation")
  @Tag("error-processing")
  void blankCommentFailsValidation() {
    AddIngredientCommentRequest request = AddIngredientCommentRequest.builder()
        .comment("   ")
        .build();

    Set<ConstraintViolation<AddIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).hasSize(1);
    assertThat(violations.iterator().next().getMessage()).isEqualTo("Comment text cannot be blank");
  }

  @Test
  @DisplayName("Long comment is valid")
  @Tag("standard-processing")
  void longCommentIsValid() {
    String longComment = "A".repeat(1000); // 1000 character comment
    AddIngredientCommentRequest request = AddIngredientCommentRequest.builder()
        .comment(longComment)
        .build();

    Set<ConstraintViolation<AddIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
    assertThat(request.getComment()).hasSize(1000);
  }

  @Test
  @DisplayName("Special characters in comment are valid")
  @Tag("standard-processing")
  void specialCharactersInCommentAreValid() {
    AddIngredientCommentRequest request = AddIngredientCommentRequest.builder()
        .comment("Comment with special chars: @#$%^&*()![]{}|\\:;\"'<>?")
        .build();

    Set<ConstraintViolation<AddIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
  }
}
