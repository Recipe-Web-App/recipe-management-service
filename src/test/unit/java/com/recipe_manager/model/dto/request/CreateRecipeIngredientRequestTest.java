package com.recipe_manager.model.dto.request;

import static org.assertj.core.api.Assertions.*;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.recipe_manager.model.enums.IngredientUnit;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class CreateRecipeIngredientRequestTest {

  @Test
  @DisplayName("Builder sets all fields")
  @Tag("standard-processing")
  void builderSetsAllFields() {
    List<String> mediaUrls = new ArrayList<>();
    CreateRecipeIngredientRequest req = CreateRecipeIngredientRequest.builder()
        .ingredientName("N")
        .ingredientId(1L)
        .quantity(BigDecimal.TEN)
        .unit(IngredientUnit.G)
        .isOptional(true)
        .notes("notes")
        .mediaUrls(mediaUrls)
        .build();
    assertThat(req.getIngredientName()).isEqualTo("N");
    assertThat(req.getIngredientId()).isEqualTo(1L);
    assertThat(req.getQuantity()).isEqualTo(BigDecimal.TEN);
    assertThat(req.getUnit()).isEqualTo(IngredientUnit.G);
    assertThat(req.getIsOptional()).isTrue();
    assertThat(req.getNotes()).isEqualTo("notes");
    assertThat(req.getMediaUrls()).isSameAs(mediaUrls);
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    CreateRecipeIngredientRequest req = new CreateRecipeIngredientRequest();
    req.setIngredientName("N");
    assertThat(req.getIngredientName()).isEqualTo("N");
    List<String> list = new ArrayList<>();
    req.setMediaUrls(list);
    assertThat(req.getMediaUrls()).isSameAs(list);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    CreateRecipeIngredientRequest req1 = CreateRecipeIngredientRequest.builder().ingredientName("A").build();
    CreateRecipeIngredientRequest req2 = CreateRecipeIngredientRequest.builder().ingredientName("A").build();
    assertThat(req1).isEqualTo(req2);
    assertThat(req1.hashCode()).isEqualTo(req2.hashCode());
    assertThat(req1.toString()).contains("A");
  }

  @Test
  @DisplayName("Null handling for all fields")
  @Tag("error-processing")
  void nullHandlingForAllFields() {
    CreateRecipeIngredientRequest req = CreateRecipeIngredientRequest.builder().build();
    assertThat(req.getIngredientName()).isNull();
    assertThat(req.getIngredientId()).isNull();
    assertThat(req.getQuantity()).isNull();
    assertThat(req.getUnit()).isNull();
    assertThat(req.getIsOptional()).isNull();
    assertThat(req.getNotes()).isNull();
    assertThat(req.getMediaUrls()).isNotNull();
    assertThat(req.getMediaUrls()).isEmpty();
  }
}
