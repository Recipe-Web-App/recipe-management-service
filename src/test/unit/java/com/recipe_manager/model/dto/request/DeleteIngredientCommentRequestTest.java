package com.recipe_manager.model.dto.request;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.Set;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class DeleteIngredientCommentRequestTest {

  private Validator validator;

  @BeforeEach
  void setUp() {
    ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
    validator = factory.getValidator();
  }

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    DeleteIngredientCommentRequest request = new DeleteIngredientCommentRequest(123L);

    assertThat(request.getCommentId()).isEqualTo(123L);
  }

  @Test
  @DisplayName("No-args constructor sets defaults and nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    DeleteIngredientCommentRequest request = new DeleteIngredientCommentRequest();

    assertThat(request.getCommentId()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    DeleteIngredientCommentRequest request = DeleteIngredientCommentRequest.builder()
        .commentId(456L)
        .build();

    assertThat(request.getCommentId()).isEqualTo(456L);
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    DeleteIngredientCommentRequest request = new DeleteIngredientCommentRequest();

    request.setCommentId(789L);
    assertThat(request.getCommentId()).isEqualTo(789L);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    DeleteIngredientCommentRequest request1 = DeleteIngredientCommentRequest.builder()
        .commentId(123L)
        .build();
    DeleteIngredientCommentRequest request2 = DeleteIngredientCommentRequest.builder()
        .commentId(123L)
        .build();

    assertThat(request1).isEqualTo(request2);
    assertThat(request1.hashCode()).isEqualTo(request2.hashCode());
    assertThat(request1.toString()).contains("123");
  }

  @Test
  @DisplayName("Valid comment ID passes validation")
  @Tag("standard-processing")
  void validCommentIdPassesValidation() {
    DeleteIngredientCommentRequest request = DeleteIngredientCommentRequest.builder()
        .commentId(123L)
        .build();

    Set<ConstraintViolation<DeleteIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
  }

  @Test
  @DisplayName("Null comment ID fails validation")
  @Tag("error-processing")
  void nullCommentIdFailsValidation() {
    DeleteIngredientCommentRequest request = DeleteIngredientCommentRequest.builder()
        .commentId(null)
        .build();

    Set<ConstraintViolation<DeleteIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).hasSize(1);
    assertThat(violations.iterator().next().getMessage()).isEqualTo("Comment ID cannot be null");
  }

  @Test
  @DisplayName("Positive comment ID is valid")
  @Tag("standard-processing")
  void positiveCommentIdIsValid() {
    DeleteIngredientCommentRequest request = DeleteIngredientCommentRequest.builder()
        .commentId(999L)
        .build();

    Set<ConstraintViolation<DeleteIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
  }

  @Test
  @DisplayName("Negative comment ID is valid")
  @Tag("standard-processing")
  void negativeCommentIdIsValid() {
    DeleteIngredientCommentRequest request = DeleteIngredientCommentRequest.builder()
        .commentId(-1L)
        .build();

    Set<ConstraintViolation<DeleteIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
  }

  @Test
  @DisplayName("Zero comment ID is valid")
  @Tag("standard-processing")
  void zeroCommentIdIsValid() {
    DeleteIngredientCommentRequest request = DeleteIngredientCommentRequest.builder()
        .commentId(0L)
        .build();

    Set<ConstraintViolation<DeleteIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
  }

  @Test
  @DisplayName("Large comment ID is valid")
  @Tag("standard-processing")
  void largeCommentIdIsValid() {
    DeleteIngredientCommentRequest request = DeleteIngredientCommentRequest.builder()
        .commentId(Long.MAX_VALUE)
        .build();

    Set<ConstraintViolation<DeleteIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
    assertThat(request.getCommentId()).isEqualTo(Long.MAX_VALUE);
  }

  @Test
  @DisplayName("Small comment ID is valid")
  @Tag("standard-processing")
  void smallCommentIdIsValid() {
    DeleteIngredientCommentRequest request = DeleteIngredientCommentRequest.builder()
        .commentId(Long.MIN_VALUE)
        .build();

    Set<ConstraintViolation<DeleteIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
    assertThat(request.getCommentId()).isEqualTo(Long.MIN_VALUE);
  }

  @Test
  @DisplayName("Different comment IDs produce different objects")
  @Tag("standard-processing")
  void differentCommentIdsProduceDifferentObjects() {
    DeleteIngredientCommentRequest request1 = DeleteIngredientCommentRequest.builder()
        .commentId(123L)
        .build();
    DeleteIngredientCommentRequest request2 = DeleteIngredientCommentRequest.builder()
        .commentId(456L)
        .build();

    assertThat(request1).isNotEqualTo(request2);
    assertThat(request1.hashCode()).isNotEqualTo(request2.hashCode());
  }
}
