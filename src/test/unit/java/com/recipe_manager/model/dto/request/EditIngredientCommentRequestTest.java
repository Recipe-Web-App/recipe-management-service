package com.recipe_manager.model.dto.request;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.Set;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class EditIngredientCommentRequestTest {

  private Validator validator;

  @BeforeEach
  void setUp() {
    ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
    validator = factory.getValidator();
  }

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    EditIngredientCommentRequest request = new EditIngredientCommentRequest(123L, "Updated comment");

    assertThat(request.getCommentId()).isEqualTo(123L);
    assertThat(request.getComment()).isEqualTo("Updated comment");
  }

  @Test
  @DisplayName("No-args constructor sets defaults and nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    EditIngredientCommentRequest request = new EditIngredientCommentRequest();

    assertThat(request.getCommentId()).isNull();
    assertThat(request.getComment()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    EditIngredientCommentRequest request = EditIngredientCommentRequest.builder()
        .commentId(456L)
        .comment("New comment text")
        .build();

    assertThat(request.getCommentId()).isEqualTo(456L);
    assertThat(request.getComment()).isEqualTo("New comment text");
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    EditIngredientCommentRequest request = new EditIngredientCommentRequest();

    request.setCommentId(789L);
    assertThat(request.getCommentId()).isEqualTo(789L);

    request.setComment("Modified comment");
    assertThat(request.getComment()).isEqualTo("Modified comment");
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    EditIngredientCommentRequest request1 = EditIngredientCommentRequest.builder()
        .commentId(123L)
        .comment("Same comment")
        .build();
    EditIngredientCommentRequest request2 = EditIngredientCommentRequest.builder()
        .commentId(123L)
        .comment("Same comment")
        .build();

    assertThat(request1).isEqualTo(request2);
    assertThat(request1.hashCode()).isEqualTo(request2.hashCode());
    assertThat(request1.toString()).contains("123");
    assertThat(request1.toString()).contains("Same comment");
  }

  @Test
  @DisplayName("Valid request passes validation")
  @Tag("standard-processing")
  void validRequestPassesValidation() {
    EditIngredientCommentRequest request = EditIngredientCommentRequest.builder()
        .commentId(123L)
        .comment("This is a valid updated comment")
        .build();

    Set<ConstraintViolation<EditIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
  }

  @Test
  @DisplayName("Null comment ID fails validation")
  @Tag("error-processing")
  void nullCommentIdFailsValidation() {
    EditIngredientCommentRequest request = EditIngredientCommentRequest.builder()
        .commentId(null)
        .comment("Valid comment")
        .build();

    Set<ConstraintViolation<EditIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).hasSize(1);
    assertThat(violations.iterator().next().getMessage()).isEqualTo("Comment ID cannot be null");
  }

  @Test
  @DisplayName("Null comment text fails validation")
  @Tag("error-processing")
  void nullCommentTextFailsValidation() {
    EditIngredientCommentRequest request = EditIngredientCommentRequest.builder()
        .commentId(123L)
        .comment(null)
        .build();

    Set<ConstraintViolation<EditIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).hasSize(1);
    assertThat(violations.iterator().next().getMessage()).isEqualTo("Comment text cannot be blank");
  }

  @Test
  @DisplayName("Empty comment text fails validation")
  @Tag("error-processing")
  void emptyCommentTextFailsValidation() {
    EditIngredientCommentRequest request = EditIngredientCommentRequest.builder()
        .commentId(123L)
        .comment("")
        .build();

    Set<ConstraintViolation<EditIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).hasSize(1);
    assertThat(violations.iterator().next().getMessage()).isEqualTo("Comment text cannot be blank");
  }

  @Test
  @DisplayName("Blank comment text fails validation")
  @Tag("error-processing")
  void blankCommentTextFailsValidation() {
    EditIngredientCommentRequest request = EditIngredientCommentRequest.builder()
        .commentId(123L)
        .comment("   ")
        .build();

    Set<ConstraintViolation<EditIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).hasSize(1);
    assertThat(violations.iterator().next().getMessage()).isEqualTo("Comment text cannot be blank");
  }

  @Test
  @DisplayName("Both null fields fail validation with multiple violations")
  @Tag("error-processing")
  void bothNullFieldsFailValidation() {
    EditIngredientCommentRequest request = EditIngredientCommentRequest.builder()
        .commentId(null)
        .comment(null)
        .build();

    Set<ConstraintViolation<EditIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).hasSize(2);
    assertThat(violations.stream().map(ConstraintViolation::getMessage))
        .containsExactlyInAnyOrder(
            "Comment ID cannot be null",
            "Comment text cannot be blank");
  }

  @Test
  @DisplayName("Negative comment ID is valid")
  @Tag("standard-processing")
  void negativeCommentIdIsValid() {
    EditIngredientCommentRequest request = EditIngredientCommentRequest.builder()
        .commentId(-1L)
        .comment("Valid comment")
        .build();

    Set<ConstraintViolation<EditIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
  }

  @Test
  @DisplayName("Zero comment ID is valid")
  @Tag("standard-processing")
  void zeroCommentIdIsValid() {
    EditIngredientCommentRequest request = EditIngredientCommentRequest.builder()
        .commentId(0L)
        .comment("Valid comment")
        .build();

    Set<ConstraintViolation<EditIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
  }

  @Test
  @DisplayName("Long comment text is valid")
  @Tag("standard-processing")
  void longCommentTextIsValid() {
    String longComment = "A".repeat(1000); // 1000 character comment
    EditIngredientCommentRequest request = EditIngredientCommentRequest.builder()
        .commentId(123L)
        .comment(longComment)
        .build();

    Set<ConstraintViolation<EditIngredientCommentRequest>> violations = validator.validate(request);

    assertThat(violations).isEmpty();
    assertThat(request.getComment()).hasSize(1000);
  }
}
