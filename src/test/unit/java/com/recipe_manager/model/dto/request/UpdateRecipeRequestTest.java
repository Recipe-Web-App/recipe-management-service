package com.recipe_manager.model.dto.request;

import static org.assertj.core.api.Assertions.assertThat;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.recipe_manager.model.dto.recipe.RecipeIngredientDto;
import com.recipe_manager.model.dto.recipe.RecipeStepDto;
import com.recipe_manager.model.enums.DifficultyLevel;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class UpdateRecipeRequestTest {

  @Test
  @DisplayName("Builder sets all fields including inherited ones")
  @Tag("standard-processing")
  void builderSetsAllFields() {
    List<RecipeIngredientDto> ingredients = new ArrayList<>();
    List<RecipeStepDto> steps = new ArrayList<>();
    UpdateRecipeRequest req = UpdateRecipeRequest.builder()
        .title("T")
        .description("D")
        .originUrl("U")
        .servings(BigDecimal.ONE)
        .preparationTime(10)
        .cookingTime(20)
        .difficulty(DifficultyLevel.EASY)
        .ingredients(ingredients)
        .steps(steps)
        .build();
    assertThat(req.getTitle()).isEqualTo("T");
    assertThat(req.getDescription()).isEqualTo("D");
    assertThat(req.getOriginUrl()).isEqualTo("U");
    assertThat(req.getServings()).isEqualTo(BigDecimal.ONE);
    assertThat(req.getPreparationTime()).isEqualTo(10);
    assertThat(req.getCookingTime()).isEqualTo(20);
    assertThat(req.getDifficulty()).isEqualTo(DifficultyLevel.EASY);
    assertThat(req.getIngredients()).isSameAs(ingredients);
    assertThat(req.getSteps()).isSameAs(steps);
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    UpdateRecipeRequest req = new UpdateRecipeRequest();
    req.setTitle("T");
    assertThat(req.getTitle()).isEqualTo("T");
    List<RecipeIngredientDto> list = new ArrayList<>();
    req.setIngredients(list);
    assertThat(req.getIngredients()).isSameAs(list);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    UpdateRecipeRequest req1 = UpdateRecipeRequest.builder().title("A").build();
    UpdateRecipeRequest req2 = UpdateRecipeRequest.builder().title("A").build();
    assertThat(req1).isEqualTo(req2);
    assertThat(req1.hashCode()).isEqualTo(req2.hashCode());
    assertThat(req1.toString()).contains("A");
  }

  @Test
  @DisplayName("Null handling for all fields")
  @Tag("error-processing")
  void nullHandlingForAllFields() {
    UpdateRecipeRequest req = UpdateRecipeRequest.builder().build();
    assertThat(req.getTitle()).isNull();
    assertThat(req.getDescription()).isNull();
    assertThat(req.getOriginUrl()).isNull();
    assertThat(req.getServings()).isNull();
    assertThat(req.getPreparationTime()).isNull();
    assertThat(req.getCookingTime()).isNull();
    assertThat(req.getDifficulty()).isNull();
    assertThat(req.getIngredients()).isNull();
    assertThat(req.getSteps()).isNull();
  }
}
