package com.recipe_manager.model.dto.response;

import static org.assertj.core.api.Assertions.*;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class ErrorResponseTest {

  @Test
  @DisplayName("Builder sets all fields")
  @Tag("standard-processing")
  void builderSetsAllFields() {
    Map<String, String> details = new HashMap<>();
    details.put("field", "error");
    LocalDateTime now = LocalDateTime.now();
    ErrorResponse err = ErrorResponse.builder()
        .timestamp(now)
        .status(404)
        .error("Not Found")
        .message("Resource not found")
        .path("/api/resource")
        .requestId("req-123")
        .details(details)
        .build();
    assertThat(err.getTimestamp()).isEqualTo(now);
    assertThat(err.getStatus()).isEqualTo(404);
    assertThat(err.getError()).isEqualTo("Not Found");
    assertThat(err.getMessage()).isEqualTo("Resource not found");
    assertThat(err.getPath()).isEqualTo("/api/resource");
    assertThat(err.getRequestId()).isEqualTo("req-123");
    assertThat(err.getDetails()).isSameAs(details);
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    ErrorResponse err = new ErrorResponse();
    err.setStatus(500);
    assertThat(err.getStatus()).isEqualTo(500);
    Map<String, String> map = new HashMap<>();
    err.setDetails(map);
    assertThat(err.getDetails()).isSameAs(map);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    ErrorResponse err1 = ErrorResponse.builder().status(400).build();
    ErrorResponse err2 = ErrorResponse.builder().status(400).build();
    assertThat(err1).isEqualTo(err2);
    assertThat(err1.hashCode()).isEqualTo(err2.hashCode());
    assertThat(err1.toString()).contains("400");
  }

  @Test
  @DisplayName("Null handling for all fields")
  @Tag("error-processing")
  void nullHandlingForAllFields() {
    ErrorResponse err = ErrorResponse.builder().build();
    assertThat(err.getTimestamp()).isNull();
    assertThat(err.getStatus()).isEqualTo(0);
    assertThat(err.getError()).isNull();
    assertThat(err.getMessage()).isNull();
    assertThat(err.getPath()).isNull();
    assertThat(err.getRequestId()).isNull();
    assertThat(err.getDetails()).isNotNull();
    assertThat(err.getDetails()).isEmpty();
  }
}
