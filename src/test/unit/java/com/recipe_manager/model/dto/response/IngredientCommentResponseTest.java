package com.recipe_manager.model.dto.response;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

import com.recipe_manager.model.dto.ingredient.IngredientCommentDto;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class IngredientCommentResponseTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    IngredientCommentDto comment = IngredientCommentDto.builder()
        .commentId(1L)
        .commentText("Test comment")
        .build();
    List<IngredientCommentDto> comments = Arrays.asList(comment);

    IngredientCommentResponse response = new IngredientCommentResponse(
        123L, 456L, comments);

    assertThat(response.getRecipeId()).isEqualTo(123L);
    assertThat(response.getIngredientId()).isEqualTo(456L);
    assertThat(response.getComments()).isEqualTo(comments);
  }

  @Test
  @DisplayName("No-args constructor sets defaults and nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    IngredientCommentResponse response = new IngredientCommentResponse();

    assertThat(response.getRecipeId()).isNull();
    assertThat(response.getIngredientId()).isNull();
    assertThat(response.getComments()).isNull();
  }

  @Test
  @DisplayName("Builder sets fields and uses defaults")
  @Tag("standard-processing")
  void builderSetsFieldsAndDefaults() {
    IngredientCommentDto comment = IngredientCommentDto.builder()
        .commentId(1L)
        .commentText("Test comment")
        .build();
    List<IngredientCommentDto> comments = Arrays.asList(comment);

    IngredientCommentResponse response = IngredientCommentResponse.builder()
        .recipeId(123L)
        .ingredientId(456L)
        .comments(comments)
        .build();

    assertThat(response.getRecipeId()).isEqualTo(123L);
    assertThat(response.getIngredientId()).isEqualTo(456L);
    assertThat(response.getComments()).isEqualTo(comments);
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    IngredientCommentResponse response = new IngredientCommentResponse();

    response.setRecipeId(789L);
    assertThat(response.getRecipeId()).isEqualTo(789L);

    response.setIngredientId(101L);
    assertThat(response.getIngredientId()).isEqualTo(101L);

    IngredientCommentDto comment = IngredientCommentDto.builder()
        .commentId(2L)
        .commentText("Another comment")
        .build();
    List<IngredientCommentDto> comments = Arrays.asList(comment);
    response.setComments(comments);
    assertThat(response.getComments()).isEqualTo(comments);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    IngredientCommentDto comment = IngredientCommentDto.builder()
        .commentId(1L)
        .commentText("Test comment")
        .build();
    List<IngredientCommentDto> comments = Arrays.asList(comment);

    IngredientCommentResponse response1 = IngredientCommentResponse.builder()
        .recipeId(123L)
        .ingredientId(456L)
        .comments(comments)
        .build();
    IngredientCommentResponse response2 = IngredientCommentResponse.builder()
        .recipeId(123L)
        .ingredientId(456L)
        .comments(comments)
        .build();

    assertThat(response1).isEqualTo(response2);
    assertThat(response1.hashCode()).isEqualTo(response2.hashCode());
    assertThat(response1.toString()).contains("123");
    assertThat(response1.toString()).contains("456");
  }

  @Test
  @DisplayName("Null handling for all fields")
  @Tag("error-processing")
  void nullHandlingForAllFields() {
    IngredientCommentResponse response = IngredientCommentResponse.builder().build();

    assertThat(response.getRecipeId()).isNull();
    assertThat(response.getIngredientId()).isNull();
    assertThat(response.getComments()).isNull();
  }

  @Test
  @DisplayName("Empty comments list is handled correctly")
  @Tag("standard-processing")
  void emptyCommentsListHandledCorrectly() {
    IngredientCommentResponse response = IngredientCommentResponse.builder()
        .recipeId(123L)
        .ingredientId(456L)
        .comments(Collections.emptyList())
        .build();

    assertThat(response.getComments()).isEmpty();
    assertThat(response.getRecipeId()).isEqualTo(123L);
    assertThat(response.getIngredientId()).isEqualTo(456L);
  }

  @Test
  @DisplayName("Multiple comments are handled correctly")
  @Tag("standard-processing")
  void multipleCommentsHandledCorrectly() {
    IngredientCommentDto comment1 = IngredientCommentDto.builder()
        .commentId(1L)
        .recipeId(123L)
        .userId(UUID.randomUUID())
        .commentText("First comment")
        .isPublic(true)
        .createdAt(LocalDateTime.now())
        .build();

    IngredientCommentDto comment2 = IngredientCommentDto.builder()
        .commentId(2L)
        .recipeId(123L)
        .userId(UUID.randomUUID())
        .commentText("Second comment")
        .isPublic(false)
        .createdAt(LocalDateTime.now())
        .build();

    List<IngredientCommentDto> comments = Arrays.asList(comment1, comment2);

    IngredientCommentResponse response = IngredientCommentResponse.builder()
        .recipeId(123L)
        .ingredientId(456L)
        .comments(comments)
        .build();

    assertThat(response.getComments()).hasSize(2);
    assertThat(response.getComments()).containsExactly(comment1, comment2);
    assertThat(response.getComments().get(0).getCommentText()).isEqualTo("First comment");
    assertThat(response.getComments().get(1).getCommentText()).isEqualTo("Second comment");
  }
}
