package com.recipe_manager.model.entity.collection;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.UUID;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

/** Unit tests for CollectionCollaboratorId. */
@Tag("unit")
class CollectionCollaboratorIdTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    // Given
    UUID userId = UUID.randomUUID();

    // When
    CollectionCollaboratorId id = new CollectionCollaboratorId(1L, userId);

    // Then
    assertThat(id.getCollectionId()).isEqualTo(1L);
    assertThat(id.getUserId()).isEqualTo(userId);
  }

  @Test
  @DisplayName("No-args constructor sets nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    // Given & When
    CollectionCollaboratorId id = new CollectionCollaboratorId();

    // Then
    assertThat(id.getCollectionId()).isNull();
    assertThat(id.getUserId()).isNull();
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    // Given
    CollectionCollaboratorId id = new CollectionCollaboratorId();
    UUID userId = UUID.randomUUID();

    // When
    id.setCollectionId(2L);
    id.setUserId(userId);

    // Then
    assertThat(id.getCollectionId()).isEqualTo(2L);
    assertThat(id.getUserId()).isEqualTo(userId);
  }

  @Test
  @DisplayName("Builder pattern works correctly")
  @Tag("standard-processing")
  void builderPatternWorks() {
    // Given
    UUID userId = UUID.randomUUID();

    // When
    CollectionCollaboratorId id =
        CollectionCollaboratorId.builder().collectionId(3L).userId(userId).build();

    // Then
    assertThat(id.getCollectionId()).isEqualTo(3L);
    assertThat(id.getUserId()).isEqualTo(userId);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    // Given
    UUID userId1 = UUID.randomUUID();
    UUID userId2 = UUID.randomUUID();
    CollectionCollaboratorId id1 =
        CollectionCollaboratorId.builder().collectionId(1L).userId(userId1).build();
    CollectionCollaboratorId id2 =
        CollectionCollaboratorId.builder().collectionId(1L).userId(userId1).build();
    CollectionCollaboratorId id3 =
        CollectionCollaboratorId.builder().collectionId(1L).userId(userId2).build();

    // Then
    assertThat(id1).isEqualTo(id2);
    assertThat(id1.hashCode()).isEqualTo(id2.hashCode());
    assertThat(id1).isNotEqualTo(id3);
    assertThat(id1.toString()).contains("1", userId1.toString());
  }

  @Test
  @DisplayName("Implements Serializable for JPA requirements")
  @Tag("standard-processing")
  void implementsSerializable() {
    // Given
    UUID userId = UUID.randomUUID();
    CollectionCollaboratorId id =
        CollectionCollaboratorId.builder().collectionId(1L).userId(userId).build();

    // Then
    assertThat(id).isInstanceOf(java.io.Serializable.class);
  }
}
