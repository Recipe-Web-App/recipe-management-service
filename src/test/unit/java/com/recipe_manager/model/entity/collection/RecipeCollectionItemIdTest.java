package com.recipe_manager.model.entity.collection;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

/** Unit tests for RecipeCollectionItemId. */
@Tag("unit")
class RecipeCollectionItemIdTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    // Given & When
    RecipeCollectionItemId id = new RecipeCollectionItemId(1L, 2L);

    // Then
    assertThat(id.getCollectionId()).isEqualTo(1L);
    assertThat(id.getRecipeId()).isEqualTo(2L);
  }

  @Test
  @DisplayName("No-args constructor sets nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    // Given & When
    RecipeCollectionItemId id = new RecipeCollectionItemId();

    // Then
    assertThat(id.getCollectionId()).isNull();
    assertThat(id.getRecipeId()).isNull();
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    // Given
    RecipeCollectionItemId id = new RecipeCollectionItemId();

    // When
    id.setCollectionId(3L);
    id.setRecipeId(4L);

    // Then
    assertThat(id.getCollectionId()).isEqualTo(3L);
    assertThat(id.getRecipeId()).isEqualTo(4L);
  }

  @Test
  @DisplayName("Builder pattern works correctly")
  @Tag("standard-processing")
  void builderPatternWorks() {
    // Given & When
    RecipeCollectionItemId id =
        RecipeCollectionItemId.builder().collectionId(5L).recipeId(6L).build();

    // Then
    assertThat(id.getCollectionId()).isEqualTo(5L);
    assertThat(id.getRecipeId()).isEqualTo(6L);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    // Given
    RecipeCollectionItemId id1 =
        RecipeCollectionItemId.builder().collectionId(1L).recipeId(2L).build();
    RecipeCollectionItemId id2 =
        RecipeCollectionItemId.builder().collectionId(1L).recipeId(2L).build();
    RecipeCollectionItemId id3 =
        RecipeCollectionItemId.builder().collectionId(1L).recipeId(3L).build();

    // Then
    assertThat(id1).isEqualTo(id2);
    assertThat(id1.hashCode()).isEqualTo(id2.hashCode());
    assertThat(id1).isNotEqualTo(id3);
    assertThat(id1.toString()).contains("1", "2");
  }

  @Test
  @DisplayName("Implements Serializable for JPA requirements")
  @Tag("standard-processing")
  void implementsSerializable() {
    // Given
    RecipeCollectionItemId id =
        RecipeCollectionItemId.builder().collectionId(1L).recipeId(2L).build();

    // Then
    assertThat(id).isInstanceOf(java.io.Serializable.class);
  }
}
