package com.recipe_manager.model.entity.ingredient;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import com.recipe_manager.model.entity.recipe.RecipeIngredient;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class IngredientTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    List<RecipeIngredient> recipeIngredients = new ArrayList<>();
    LocalDateTime now = LocalDateTime.now();
    Ingredient ingredient = new Ingredient(1L, "name", "desc", "cat", now, recipeIngredients);
    assertThat(ingredient.getIngredientId()).isEqualTo(1L);
    assertThat(ingredient.getName()).isEqualTo("name");
    assertThat(ingredient.getDescription()).isEqualTo("desc");
    assertThat(ingredient.getCategory()).isEqualTo("cat");
    assertThat(ingredient.getCreatedAt()).isEqualTo(now);
    assertThat(ingredient.getRecipeIngredients()).isSameAs(recipeIngredients);
  }

  @Test
  @DisplayName("No-args constructor sets nulls and empty list")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    Ingredient ingredient = new Ingredient();
    assertThat(ingredient.getIngredientId()).isNull();
    assertThat(ingredient.getName()).isNull();
    assertThat(ingredient.getDescription()).isNull();
    assertThat(ingredient.getCategory()).isNull();
    assertThat(ingredient.getCreatedAt()).isNull();
    assertThat(ingredient.getRecipeIngredients()).isNull();
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    Ingredient ingredient = new Ingredient();
    ingredient.setName("Sugar");
    assertThat(ingredient.getName()).isEqualTo("Sugar");
    List<RecipeIngredient> list = new ArrayList<>();
    ingredient.setRecipeIngredients(list);
    assertThat(ingredient.getRecipeIngredients()).isSameAs(list);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    Ingredient i1 = Ingredient.builder().name("A").build();
    Ingredient i2 = Ingredient.builder().name("A").build();
    assertThat(i1).isEqualTo(i2);
    assertThat(i1.hashCode()).isEqualTo(i2.hashCode());
    assertThat(i1.toString()).contains("A");
  }
}
