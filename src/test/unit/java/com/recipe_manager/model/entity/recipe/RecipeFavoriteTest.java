package com.recipe_manager.model.entity.recipe;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;
import java.util.UUID;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class RecipeFavoriteTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    UUID userId = UUID.randomUUID();
    RecipeFavoriteId id = new RecipeFavoriteId(userId, 1L);
    Recipe recipe = new Recipe();
    LocalDateTime now = LocalDateTime.now();
    RecipeFavorite fav = new RecipeFavorite(id, recipe, now);
    assertThat(fav.getId()).isEqualTo(id);
    assertThat(fav.getRecipe()).isSameAs(recipe);
    assertThat(fav.getId().getUserId()).isEqualTo(userId); // Access through embedded ID
    assertThat(fav.getFavoritedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("No-args constructor sets nulls")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    RecipeFavorite fav = new RecipeFavorite();
    assertThat(fav.getId()).isNull();
    assertThat(fav.getRecipe()).isNull();
    assertThat(fav.getFavoritedAt()).isNull();
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    RecipeFavorite fav = new RecipeFavorite();
    RecipeFavoriteId id = new RecipeFavoriteId();
    id.setUserId(UUID.randomUUID());
    fav.setId(id);
    assertThat(fav.getId().getUserId()).isNotNull();
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    RecipeFavoriteId id = new RecipeFavoriteId(UUID.randomUUID(), 1L);
    RecipeFavorite f1 = RecipeFavorite.builder().id(id).build();
    RecipeFavorite f2 = RecipeFavorite.builder().id(id).build();
    assertThat(f1).isEqualTo(f2);
    assertThat(f1.hashCode()).isEqualTo(f2.hashCode());
    assertThat(f1.toString()).contains("RecipeFavorite");
  }
}
