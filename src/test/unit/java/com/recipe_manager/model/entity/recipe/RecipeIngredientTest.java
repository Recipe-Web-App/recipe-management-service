package com.recipe_manager.model.entity.recipe;

import static org.assertj.core.api.Assertions.assertThat;

import java.math.BigDecimal;

import com.recipe_manager.model.entity.ingredient.Ingredient;
import com.recipe_manager.model.enums.IngredientUnit;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class RecipeIngredientTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    RecipeIngredientId id = new RecipeIngredientId(1L, 2L);
    Recipe recipe = new Recipe();
    Ingredient ingredient = new Ingredient();
    BigDecimal quantity = BigDecimal.TEN;
    IngredientUnit unit = IngredientUnit.G;
    Boolean isOptional = true;
    RecipeIngredient ri = new RecipeIngredient(id, recipe, ingredient, quantity, unit, isOptional);
    assertThat(ri.getId()).isEqualTo(id);
    assertThat(ri.getRecipe()).isSameAs(recipe);
    assertThat(ri.getIngredient()).isSameAs(ingredient);
    assertThat(ri.getQuantity()).isEqualTo(quantity);
    assertThat(ri.getUnit()).isEqualTo(unit);
    assertThat(ri.getIsOptional()).isEqualTo(isOptional);
  }

  @Test
  @DisplayName("No-args constructor sets nulls and default isOptional")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    RecipeIngredient ri = new RecipeIngredient();
    assertThat(ri.getId()).isNull();
    assertThat(ri.getRecipe()).isNull();
    assertThat(ri.getIngredient()).isNull();
    assertThat(ri.getQuantity()).isNull();
    assertThat(ri.getUnit()).isNull();
    assertThat(ri.getIsOptional()).isFalse();
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    RecipeIngredient ri = new RecipeIngredient();
    ri.setIsOptional(true);
    assertThat(ri.getIsOptional()).isTrue();
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    RecipeIngredientId id = new RecipeIngredientId(1L, 2L);
    RecipeIngredient r1 = RecipeIngredient.builder().id(id).build();
    RecipeIngredient r2 = RecipeIngredient.builder().id(id).build();
    assertThat(r1).isEqualTo(r2);
    assertThat(r1.hashCode()).isEqualTo(r2.hashCode());
    assertThat(r1.toString()).contains("RecipeIngredient");
  }
}
