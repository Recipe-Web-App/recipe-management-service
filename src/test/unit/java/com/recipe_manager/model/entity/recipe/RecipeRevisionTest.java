package com.recipe_manager.model.entity.recipe;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;
import java.util.UUID;

import com.recipe_manager.model.enums.RevisionCategory;
import com.recipe_manager.model.enums.RevisionType;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class RecipeRevisionTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    Recipe recipe = new Recipe();
    UUID userId = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();
    RecipeRevision revision = new RecipeRevision(1L, recipe, userId, RevisionCategory.INGREDIENT, RevisionType.ADD,
        "prev", "new", "comment", now);
    assertThat(revision.getRevisionId()).isEqualTo(1L);
    assertThat(revision.getRecipe()).isSameAs(recipe);
    assertThat(revision.getUserId()).isEqualTo(userId);
    assertThat(revision.getRevisionCategory()).isEqualTo(RevisionCategory.INGREDIENT);
    assertThat(revision.getRevisionType()).isEqualTo(RevisionType.ADD);
    assertThat(revision.getPreviousData()).isEqualTo("prev");
    assertThat(revision.getNewData()).isEqualTo("new");
    assertThat(revision.getChangeComment()).isEqualTo("comment");
    assertThat(revision.getCreatedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("No-args constructor sets nulls and default createdAt")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    RecipeRevision revision = new RecipeRevision();
    assertThat(revision.getRevisionId()).isNull();
    assertThat(revision.getRecipe()).isNull();
    assertThat(revision.getUserId()).isNull();
    assertThat(revision.getRevisionCategory()).isNull();
    assertThat(revision.getRevisionType()).isNull();
    assertThat(revision.getPreviousData()).isNull();
    assertThat(revision.getNewData()).isNull();
    assertThat(revision.getChangeComment()).isNull();
    // createdAt may be set by default, but we allow null for test
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    RecipeRevision revision = new RecipeRevision();
    revision.setChangeComment("Test");
    assertThat(revision.getChangeComment()).isEqualTo("Test");
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    LocalDateTime now = LocalDateTime.now();
    RecipeRevision r1 = RecipeRevision.builder().previousData("A").createdAt(now).build();
    RecipeRevision r2 = RecipeRevision.builder().previousData("A").createdAt(now).build();
    assertThat(r1).isEqualTo(r2);
    assertThat(r1.hashCode()).isEqualTo(r2.hashCode());
    assertThat(r1.toString()).contains("A");
  }
}
