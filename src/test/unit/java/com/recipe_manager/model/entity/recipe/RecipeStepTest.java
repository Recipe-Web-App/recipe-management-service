package com.recipe_manager.model.entity.recipe;

import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDateTime;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class RecipeStepTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    Recipe recipe = new Recipe();
    LocalDateTime now = LocalDateTime.now();
    RecipeStep step = new RecipeStep(1L, recipe, 2, "instruction", true, 60, now);
    assertThat(step.getStepId()).isEqualTo(1L);
    assertThat(step.getRecipe()).isSameAs(recipe);
    assertThat(step.getStepNumber()).isEqualTo(2);
    assertThat(step.getInstruction()).isEqualTo("instruction");
    assertThat(step.getOptional()).isTrue();
    assertThat(step.getTimerSeconds()).isEqualTo(60);
    assertThat(step.getCreatedAt()).isEqualTo(now);
  }

  @Test
  @DisplayName("No-args constructor sets nulls and default optional")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    RecipeStep step = new RecipeStep();
    assertThat(step.getStepId()).isNull();
    assertThat(step.getRecipe()).isNull();
    assertThat(step.getStepNumber()).isNull();
    assertThat(step.getInstruction()).isNull();
    assertThat(step.getOptional()).isFalse();
    assertThat(step.getTimerSeconds()).isNull();
    assertThat(step.getCreatedAt()).isNull();
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    RecipeStep step = new RecipeStep();
    step.setInstruction("Mix");
    assertThat(step.getInstruction()).isEqualTo("Mix");
    step.setOptional(true);
    assertThat(step.getOptional()).isTrue();
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    RecipeStep s1 = RecipeStep.builder().stepNumber(1).build();
    RecipeStep s2 = RecipeStep.builder().stepNumber(1).build();
    assertThat(s1).isEqualTo(s2);
    assertThat(s1.hashCode()).isEqualTo(s2.hashCode());
    assertThat(s1.toString()).contains("RecipeStep");
  }
}
