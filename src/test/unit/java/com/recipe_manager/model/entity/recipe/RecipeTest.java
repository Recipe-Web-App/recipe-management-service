package com.recipe_manager.model.entity.recipe;

import static org.assertj.core.api.Assertions.assertThat;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.recipe_manager.model.enums.DifficultyLevel;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

@Tag("unit")
class RecipeTest {

  @Test
  @DisplayName("All-args constructor assigns all fields")
  @Tag("standard-processing")
  void allArgsConstructorAssignsFields() {
    List<RecipeIngredient> ingredients = new ArrayList<>();
    List<RecipeStep> steps = new ArrayList<>();
    List<RecipeRevision> revisions = new ArrayList<>();
    List<RecipeFavorite> favorites = new ArrayList<>();
    List<RecipeTag> tags = new ArrayList<>();
    UUID userId = UUID.randomUUID();
    LocalDateTime now = LocalDateTime.now();
    Recipe recipe = new Recipe(1L, userId, "title", "desc", "url", BigDecimal.ONE, 10, 20, DifficultyLevel.EASY, now,
        now, ingredients, steps, revisions, favorites, tags);
    assertThat(recipe.getRecipeId()).isEqualTo(1L);
    assertThat(recipe.getUserId()).isEqualTo(userId);
    assertThat(recipe.getTitle()).isEqualTo("title");
    assertThat(recipe.getDescription()).isEqualTo("desc");
    assertThat(recipe.getOriginUrl()).isEqualTo("url");
    assertThat(recipe.getServings()).isEqualTo(BigDecimal.ONE);
    assertThat(recipe.getPreparationTime()).isEqualTo(10);
    assertThat(recipe.getCookingTime()).isEqualTo(20);
    assertThat(recipe.getDifficulty()).isEqualTo(DifficultyLevel.EASY);
    assertThat(recipe.getCreatedAt()).isEqualTo(now);
    assertThat(recipe.getUpdatedAt()).isEqualTo(now);
    assertThat(recipe.getRecipeIngredients()).isSameAs(ingredients);
    assertThat(recipe.getRecipeSteps()).isSameAs(steps);
    assertThat(recipe.getRecipeRevisions()).isSameAs(revisions);
    assertThat(recipe.getRecipeFavorites()).isSameAs(favorites);
    assertThat(recipe.getRecipeTags()).isSameAs(tags);
  }

  @Test
  @DisplayName("No-args constructor sets nulls and empty lists")
  @Tag("standard-processing")
  void noArgsConstructorSetsDefaults() {
    Recipe recipe = new Recipe();
    assertThat(recipe.getRecipeId()).isNull();
    assertThat(recipe.getUserId()).isNull();
    assertThat(recipe.getTitle()).isNull();
    assertThat(recipe.getDescription()).isNull();
    assertThat(recipe.getOriginUrl()).isNull();
    assertThat(recipe.getServings()).isNull();
    assertThat(recipe.getPreparationTime()).isNull();
    assertThat(recipe.getCookingTime()).isNull();
    assertThat(recipe.getDifficulty()).isNull();
    assertThat(recipe.getCreatedAt()).isNull();
    assertThat(recipe.getUpdatedAt()).isNull();
    assertThat(recipe.getRecipeIngredients()).isNotNull();
    assertThat(recipe.getRecipeSteps()).isNotNull();
    assertThat(recipe.getRecipeRevisions()).isNotNull();
    assertThat(recipe.getRecipeFavorites()).isNotNull();
    assertThat(recipe.getRecipeTags()).isNotNull();
  }

  @Test
  @DisplayName("Setters and getters work for all fields")
  @Tag("standard-processing")
  void settersAndGettersWork() {
    Recipe recipe = new Recipe();
    recipe.setTitle("T");
    assertThat(recipe.getTitle()).isEqualTo("T");
    List<RecipeIngredient> list = new ArrayList<>();
    recipe.setRecipeIngredients(list);
    assertThat(recipe.getRecipeIngredients()).isSameAs(list);
  }

  @Test
  @DisplayName("Equals/hashCode/toString are generated by Lombok")
  @Tag("standard-processing")
  void equalsHashCodeToString() {
    Recipe r1 = Recipe.builder().title("A").build();
    Recipe r2 = Recipe.builder().title("A").build();
    assertThat(r1).isEqualTo(r2);
    assertThat(r1.hashCode()).isEqualTo(r2.hashCode());
    assertThat(r1.toString()).contains("A");
  }
}
